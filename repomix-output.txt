This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
backend/
  src/
    main/
      java/
        com/
          audiosync/
            backend/
              config/
                CorsConfig.java
                SchedulerConfig.java
                WebSocketConfig.java
              controller/
                RoomController.java
                WebSocketController.java
              model/
                AudioSource.java
                ConnectionQuality.java
                Device.java
                Room.java
                RoomDTO.java
              service/
                AudioStreamingService.java
                RoomService.java
              websocket/
                AudioDataMessage.java
                AudioSourceMessage.java
                DeviceUpdateMessage.java
                HeartbeatMessage.java
                JoinRoomMessage.java
                LatencyMessage.java
                LeaveRoomMessage.java
                PlaybackControlMessage.java
                RoomInfoMessage.java
                VolumeControlMessage.java
              AudioSyncApplication.java
      resources/
        application.properties
  pom.xml
src/
  app/
    client/
      layout.tsx
      page.tsx
    host/
      layout.tsx
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      date-picker-with-range.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      icons.tsx
      input.tsx
      label.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      skeleton.tsx
      slider.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
    audio-playback.tsx
    audio-player.tsx
    audio-visualizer.tsx
    device-list.tsx
    navbar.tsx
    qr-code.tsx
    tempo-init.tsx
    theme-provider.tsx
    theme-switcher.tsx
  lib/
    audio-sync-client.ts
    audio-sync.ts
    utils.ts
    websocket-client.ts
  types/
    index.d.ts
.gitignore
components.json
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.ts
tempo.config.json
tsconfig.json

================================================================
Files
================================================================

================
File: backend/src/main/java/com/audiosync/backend/config/CorsConfig.java
================
package com.audiosync.backend.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

@Configuration
public class CorsConfig {

    @Bean
    public CorsFilter corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOriginPattern("*");
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");
        source.registerCorsConfiguration("/**", config);
        return new CorsFilter(source);
    }
}

================
File: backend/src/main/java/com/audiosync/backend/config/SchedulerConfig.java
================
package com.audiosync.backend.config;

import com.audiosync.backend.service.RoomService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

@Configuration
@EnableScheduling
public class SchedulerConfig {

    private final RoomService roomService;

    @Autowired
    public SchedulerConfig(RoomService roomService) {
        this.roomService = roomService;
    }

    /**
     * Scheduled task to clean up inactive devices and empty rooms
     * Runs every 30 seconds
     */
    @Scheduled(fixedRate = 30000)
    public void cleanupInactiveDevices() {
        roomService.cleanupInactiveDevices();
    }

    /**
     * Scheduled task to remove empty rooms
     * Runs every 5 minutes
     */
    @Scheduled(fixedRate = 300000)
    public void cleanupEmptyRooms() {
        roomService.cleanupEmptyRooms();
    }
}

================
File: backend/src/main/java/com/audiosync/backend/config/WebSocketConfig.java
================
package com.audiosync.backend.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic");
        config.setApplicationDestinationPrefixes("/app");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws")
                .setAllowedOriginPatterns("*")
                .withSockJS();
    }
}

================
File: backend/src/main/java/com/audiosync/backend/controller/RoomController.java
================
package com.audiosync.backend.controller;

import com.audiosync.backend.model.Device;
import com.audiosync.backend.model.Room;
import com.audiosync.backend.model.RoomDTO;
import com.audiosync.backend.service.RoomService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/rooms")
public class RoomController {

    private final RoomService roomService;

    @Autowired
    public RoomController(RoomService roomService) {
        this.roomService = roomService;
    }

    @PostMapping
    public ResponseEntity<RoomDTO> createRoom(@RequestParam String hostId) {
        Room room = roomService.createRoom(hostId);
        return ResponseEntity.ok(RoomDTO.fromRoom(room));
    }

    @GetMapping("/{roomId}")
    public ResponseEntity<RoomDTO> getRoomById(@PathVariable String roomId) {
        return roomService.getRoomById(roomId)
                .map(room -> ResponseEntity.ok(RoomDTO.fromRoom(room)))
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/code/{code}")
    public ResponseEntity<RoomDTO> getRoomByCode(@PathVariable String code) {
        return roomService.getRoomByCode(code)
                .map(room -> ResponseEntity.ok(RoomDTO.fromRoom(room)))
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/{roomId}/devices")
    public ResponseEntity<List<Device>> getRoomDevices(@PathVariable String roomId) {
        return roomService.getRoomById(roomId)
                .map(room -> ResponseEntity.ok(room.getDevices()))
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/{roomId}/active-devices")
    public ResponseEntity<List<Device>> getActiveDevices(@PathVariable String roomId) {
        List<Device> activeDevices = roomService.getActiveDevices(roomId);
        return ResponseEntity.ok(activeDevices);
    }

    @DeleteMapping("/{roomId}")
    public ResponseEntity<Void> deleteRoom(@PathVariable String roomId) {
        roomService.removeRoom(roomId);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/host/{hostId}")
    public ResponseEntity<List<RoomDTO>> getRoomsByHost(@PathVariable String hostId) {
        List<RoomDTO> rooms = roomService.getRoomsByHost(hostId).stream()
                .map(RoomDTO::fromRoom)
                .collect(Collectors.toList());
        return ResponseEntity.ok(rooms);
    }
}

================
File: backend/src/main/java/com/audiosync/backend/controller/WebSocketController.java
================
package com.audiosync.backend.controller;

import com.audiosync.backend.model.AudioSource;
import com.audiosync.backend.model.Device;
import com.audiosync.backend.model.Room;
import com.audiosync.backend.service.AudioStreamingService;
import com.audiosync.backend.service.RoomService;
import com.audiosync.backend.websocket.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import java.util.Optional;

@Controller
public class WebSocketController {
    private static final Logger logger = LoggerFactory.getLogger(WebSocketController.class);

    private final SimpMessagingTemplate messagingTemplate;
    private final RoomService roomService;
    private final AudioStreamingService audioStreamingService;

    @Autowired
    public WebSocketController(SimpMessagingTemplate messagingTemplate, 
                              RoomService roomService,
                              AudioStreamingService audioStreamingService) {
        this.messagingTemplate = messagingTemplate;
        this.roomService = roomService;
        this.audioStreamingService = audioStreamingService;
    }

    @MessageMapping("/join")
    public void joinRoom(@Payload JoinRoomMessage message) {
        Optional<Room> roomOpt = roomService.getRoomByCode(message.getRoomCode());
        
        if (roomOpt.isPresent()) {
            Room room = roomOpt.get();
            Device device = roomService.addDeviceToRoom(room.getId(), message.getDeviceId(), message.getDeviceName());
            
            // Send room info to the joining device
            RoomInfoMessage roomInfo = new RoomInfoMessage();
            roomInfo.setRoomId(room.getId());
            roomInfo.setRoomCode(room.getCode());
            roomInfo.setPlaying(room.isPlaying());
            roomInfo.setCurrentTimestamp(room.getCurrentPlaybackTime());
            roomInfo.setMasterVolume(room.getMasterVolume());
            roomInfo.setAudioSource(room.getAudioSource());
            
            messagingTemplate.convertAndSendToUser(message.getDeviceId(), "/topic/room", roomInfo);
            
            // Notify host about new device
            DeviceUpdateMessage deviceUpdate = new DeviceUpdateMessage();
            deviceUpdate.setDeviceId(device.getId());
            deviceUpdate.setDeviceName(device.getName());
            deviceUpdate.setConnectionQuality(device.getConnectionQuality());
            deviceUpdate.setLatency(device.getLatency());
            deviceUpdate.setVolume(device.getVolume());
            deviceUpdate.setAction("JOIN");
            
            messagingTemplate.convertAndSendToUser(room.getHostId(), "/topic/devices", deviceUpdate);
        }
    }

    @MessageMapping("/leave")
    public void leaveRoom(@Payload LeaveRoomMessage message) {
        Optional<Room> roomOpt = roomService.getRoomById(message.getRoomId());
        
        if (roomOpt.isPresent()) {
            Room room = roomOpt.get();
            roomService.removeDeviceFromRoom(room.getId(), message.getDeviceId());
            
            // Notify host about device leaving
            DeviceUpdateMessage deviceUpdate = new DeviceUpdateMessage();
            deviceUpdate.setDeviceId(message.getDeviceId());
            deviceUpdate.setAction("LEAVE");
            
            messagingTemplate.convertAndSendToUser(room.getHostId(), "/topic/devices", deviceUpdate);
        }
    }

    @MessageMapping("/playback")
    public void updatePlayback(@Payload PlaybackControlMessage message) {
        Optional<Room> roomOpt = roomService.getRoomById(message.getRoomId());
        
        if (roomOpt.isPresent()) {
            Room room = roomOpt.get();
            
            // Only host can control playback
            if (message.getDeviceId().equals(room.getHostId())) {
                roomService.setPlaybackState(room.getId(), message.isPlaying(), message.getTimestamp());
                
                // Update audio streaming service about playback state change
                audioStreamingService.updatePlaybackState(room.getId(), message.isPlaying());
                
                // Broadcast to all devices in the room
                messagingTemplate.convertAndSend("/topic/room/" + room.getId() + "/playback", message);
                
                logger.info("Playback state updated for room {}: {}", room.getId(), 
                        message.isPlaying() ? "playing" : "paused");
            }
        }
    }

    @MessageMapping("/volume")
    public void updateVolume(@Payload VolumeControlMessage message) {
        Optional<Room> roomOpt = roomService.getRoomById(message.getRoomId());
        
        if (roomOpt.isPresent()) {
            Room room = roomOpt.get();
            
            if (message.getTargetDeviceId() == null) {
                // Master volume update (host only)
                if (message.getDeviceId().equals(room.getHostId())) {
                    roomService.setMasterVolume(room.getId(), message.getVolume());
                    messagingTemplate.convertAndSend("/topic/room/" + room.getId() + "/volume", message);
                }
            } else {
                // Individual device volume update
                if (message.getDeviceId().equals(message.getTargetDeviceId()) || 
                    message.getDeviceId().equals(room.getHostId())) {
                    roomService.setDeviceVolume(room.getId(), message.getTargetDeviceId(), message.getVolume());
                    
                    // If host changed a device's volume, notify that device
                    if (message.getDeviceId().equals(room.getHostId())) {
                        messagingTemplate.convertAndSendToUser(
                            message.getTargetDeviceId(), 
                            "/topic/volume", 
                            message
                        );
                    }
                }
            }
        }
    }

    @MessageMapping("/audio-source")
    public void setAudioSource(@Payload AudioSourceMessage message) {
        Optional<Room> roomOpt = roomService.getRoomById(message.getRoomId());
        
        if (roomOpt.isPresent()) {
            Room room = roomOpt.get();
            
            // Only host can set audio source
            if (message.getDeviceId().equals(room.getHostId())) {
                AudioSource audioSource = new AudioSource();
                audioSource.setType(message.getSourceType());
                audioSource.setSourceId(message.getSourceId());
                audioSource.setSourceUrl(message.getSourceUrl());
                audioSource.setDuration(message.getDuration());
                
                roomService.setAudioSource(room.getId(), audioSource);
                
                // Broadcast to all devices in the room
                messagingTemplate.convertAndSend("/topic/room/" + room.getId() + "/audio-source", message);
            }
        }
    }

    @MessageMapping("/latency")
    public void updateLatency(@Payload LatencyMessage message) {
        Optional<Room> roomOpt = roomService.getRoomById(message.getRoomId());
        
        if (roomOpt.isPresent()) {
            Room room = roomOpt.get();
            roomService.updateDeviceLatency(room.getId(), message.getDeviceId(), message.getLatency());
            
            // Notify host about updated latency
            Device device = room.getDevice(message.getDeviceId());
            if (device != null) {
                DeviceUpdateMessage deviceUpdate = new DeviceUpdateMessage();
                deviceUpdate.setDeviceId(device.getId());
                deviceUpdate.setConnectionQuality(device.getConnectionQuality());
                deviceUpdate.setLatency(device.getLatency());
                deviceUpdate.setAction("UPDATE");
                
                messagingTemplate.convertAndSendToUser(room.getHostId(), "/topic/devices", deviceUpdate);
            }
        }
    }

    @MessageMapping("/heartbeat")
    public void heartbeat(@Payload HeartbeatMessage message) {
        Optional<Room> roomOpt = roomService.getRoomById(message.getRoomId());
        
        if (roomOpt.isPresent()) {
            Room room = roomOpt.get();
            roomService.updateDeviceHeartbeat(room.getId(), message.getDeviceId());
        }
    }
    
    /**
     * Handle audio data streaming from the host to clients
     * @param message Audio data message containing binary audio data and metadata
     */
    @MessageMapping("/audio-data")
    public void handleAudioData(@Payload AudioDataMessage message) {
        logger.debug("Received audio data for room: {} from device: {}", message.getRoomId(), message.getDeviceId());
        audioStreamingService.processAudioData(message);
    }
}

================
File: backend/src/main/java/com/audiosync/backend/model/AudioSource.java
================
package com.audiosync.backend.model;

import lombok.Data;
import lombok.Getter;
import lombok.Setter;

@Data
@Getter
@Setter
public class AudioSource {
    private AudioSourceType type;
    private String sourceId;
    private String sourceUrl;
    private long duration;

    public enum AudioSourceType {
        FILE,
        MICROPHONE,
        SYSTEM
    }
}

================
File: backend/src/main/java/com/audiosync/backend/model/ConnectionQuality.java
================
package com.audiosync.backend.model;

public enum ConnectionQuality {
    GOOD,
    MEDIUM,
    POOR,
    DISCONNECTED
}

================
File: backend/src/main/java/com/audiosync/backend/model/Device.java
================
package com.audiosync.backend.model;

import lombok.Data;

@Data
public class Device {
    private String id;
    private String name;
    private ConnectionQuality connectionQuality;
    private int latency;
    private int volume;
    private long lastHeartbeat;

    public Device(String id, String name) {
        this.id = id;
        this.name = name;
        this.connectionQuality = ConnectionQuality.GOOD;
        this.latency = 0;
        this.volume = 70;
        this.lastHeartbeat = System.currentTimeMillis();
    }

    public void updateHeartbeat() {
        this.lastHeartbeat = System.currentTimeMillis();
    }

    public void updateLatency(int latency) {
        this.latency = latency;
        updateConnectionQuality();
    }

    private void updateConnectionQuality() {
        if (latency < 50) {
            this.connectionQuality = ConnectionQuality.GOOD;
        } else if (latency < 150) {
            this.connectionQuality = ConnectionQuality.MEDIUM;
        } else {
            this.connectionQuality = ConnectionQuality.POOR;
        }
    }

    public boolean isActive() {
        return System.currentTimeMillis() - lastHeartbeat < 10000; // 10 seconds timeout
    }
}

================
File: backend/src/main/java/com/audiosync/backend/model/Room.java
================
package com.audiosync.backend.model;

import lombok.Data;
import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@Getter
@Setter
public class Room {
    private String id;
    private String code;
    private String hostId;
    private List<Device> devices;
    private AudioSource audioSource;
    private boolean isPlaying;
    private int masterVolume;
    private long currentTimestamp;
    private long lastUpdateTime;

    public Room(String hostId) {
        this.id = UUID.randomUUID().toString();
        this.code = generateRoomCode();
        this.hostId = hostId;
        this.devices = new ArrayList<>();
        this.audioSource = null;
        this.isPlaying = false;
        this.masterVolume = 80;
        this.currentTimestamp = 0;
        this.lastUpdateTime = System.currentTimeMillis();
    }

    private String generateRoomCode() {
        // Generate a simpler, more readable room code (6 characters, alphanumeric)
        String chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"; // Removed similar looking characters
        StringBuilder code = new StringBuilder();
        java.util.Random random = new java.util.Random();
        
        for (int i = 0; i < 6; i++) {
            code.append(chars.charAt(random.nextInt(chars.length())));
        }
        
        return code.toString();
    }

    public void addDevice(Device device) {
        this.devices.add(device);
    }

    public void removeDevice(String deviceId) {
        this.devices.removeIf(device -> device.getId().equals(deviceId));
    }

    public Device getDevice(String deviceId) {
        return this.devices.stream()
                .filter(device -> device.getId().equals(deviceId))
                .findFirst()
                .orElse(null);
    }
    
    public String getHostId() {
        return this.hostId;
    }
    
    public String getId() {
        return this.id;
    }

    public void updatePlaybackTime(long timestamp) {
        this.currentTimestamp = timestamp;
        this.lastUpdateTime = System.currentTimeMillis();
    }

    public long getCurrentPlaybackTime() {
        if (isPlaying) {
            return currentTimestamp + (System.currentTimeMillis() - lastUpdateTime);
        }
        return currentTimestamp;
    }
}

================
File: backend/src/main/java/com/audiosync/backend/model/RoomDTO.java
================
package com.audiosync.backend.model;

import lombok.Data;

@Data
public class RoomDTO {
    private String id;
    private String code;
    private String hostId;
    private int connectedDevices;
    private boolean isPlaying;
    private int masterVolume;
    private AudioSource audioSource;
    
    public static RoomDTO fromRoom(Room room) {
        RoomDTO dto = new RoomDTO();
        dto.setId(room.getId());
        dto.setCode(room.getCode());
        dto.setHostId(room.getHostId());
        dto.setConnectedDevices(room.getDevices().size());
        dto.setPlaying(room.isPlaying());
        dto.setMasterVolume(room.getMasterVolume());
        dto.setAudioSource(room.getAudioSource());
        return dto;
    }
}

================
File: backend/src/main/java/com/audiosync/backend/service/AudioStreamingService.java
================
package com.audiosync.backend.service;

import com.audiosync.backend.model.Device;
import com.audiosync.backend.model.Room;
import com.audiosync.backend.websocket.AudioDataMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class AudioStreamingService {
    private static final Logger logger = LoggerFactory.getLogger(AudioStreamingService.class);
    
    private final SimpMessagingTemplate messagingTemplate;
    private final RoomService roomService;
    
    // Store the latest audio chunk timestamp for each room
    private final Map<String, Long> roomLastAudioTimestamp = new ConcurrentHashMap<>();
    
    // Store buffer size for each device (in ms) for latency compensation
    private final Map<String, Integer> deviceBufferSizes = new ConcurrentHashMap<>();
    
    @Autowired
    public AudioStreamingService(SimpMessagingTemplate messagingTemplate, RoomService roomService) {
        this.messagingTemplate = messagingTemplate;
        this.roomService = roomService;
    }
    
    /**
     * Process incoming audio data from the host and broadcast to clients
     * @param message The audio data message
     */
    public void processAudioData(AudioDataMessage message) {
        String roomId = message.getRoomId();
        Optional<Room> roomOpt = roomService.getRoomById(roomId);
        
        if (roomOpt.isEmpty()) {
            logger.warn("Received audio data for non-existent room: {}", roomId);
            return;
        }
        
        Room room = roomOpt.get();
        
        // Only the host can send audio data
        if (!message.getDeviceId().equals(room.getHostId())) {
            logger.warn("Non-host device attempted to send audio data: {}", message.getDeviceId());
            return;
        }
        
        // Update the last audio timestamp for this room
        roomLastAudioTimestamp.put(roomId, message.getTimestamp());
        
        // Broadcast to all clients in the room with latency compensation
        for (Device device : room.getDevices()) {
            // Skip the host
            if (device.getId().equals(room.getHostId())) {
                continue;
            }
            
            // Get or calculate buffer size for this device based on latency
            int bufferSize = calculateBufferSize(device);
            deviceBufferSizes.put(device.getId(), bufferSize);
            
            // Create a copy of the message with device-specific metadata
            AudioDataMessage deviceMessage = new AudioDataMessage();
            deviceMessage.setRoomId(roomId);
            deviceMessage.setDeviceId(message.getDeviceId());
            deviceMessage.setAudioData(message.getAudioData());
            deviceMessage.setTimestamp(message.getTimestamp());
            deviceMessage.setSampleRate(message.getSampleRate());
            deviceMessage.setChannels(message.getChannels());
            deviceMessage.setEncoding(message.getEncoding());
            
            // Send to the specific device
            messagingTemplate.convertAndSendToUser(
                device.getId(),
                "/topic/audio",
                deviceMessage
            );
        }
    }
    
    /**
     * Calculate appropriate buffer size based on device latency
     * @param device The client device
     * @return Buffer size in milliseconds
     */
    private int calculateBufferSize(Device device) {
        // Base buffer size
        int baseBuffer = 200; // 200ms base buffer
        
        // Add additional buffer based on latency and jitter
        int latencyBuffer = (int) (device.getLatency() * 1.5); // 1.5x the measured latency
        
        // Calculate connection quality factor (0.8 to 2.0)
        double qualityFactor;
        switch (device.getConnectionQuality()) {
            case GOOD:
                qualityFactor = 0.8;
                break;
            case MEDIUM:
                qualityFactor = 1.3;
                break;
            case POOR:
                qualityFactor = 1.7;
                break;
            case DISCONNECTED:
                qualityFactor = 2.0;
                break;
            default: // unknown
                qualityFactor = 2.0;
        }
        
        // Calculate final buffer size
        return (int) ((baseBuffer + latencyBuffer) * qualityFactor);
    }
    
    /**
     * Get the current buffer size for a device
     * @param deviceId The device ID
     * @return Buffer size in milliseconds, or default if not set
     */
    public int getDeviceBufferSize(String deviceId) {
        return deviceBufferSizes.getOrDefault(deviceId, 300); // Default 300ms
    }
    
    /**
     * Update the audio playback state for a room
     * @param roomId The room ID
     * @param isPlaying Whether playback is active
     */
    public void updatePlaybackState(String roomId, boolean isPlaying) {
        // Reset timestamps if playback is starting
        if (isPlaying) {
            roomLastAudioTimestamp.put(roomId, System.currentTimeMillis());
        }
    }
    
    /**
     * Clean up resources for a room when it's removed
     * @param roomId The room ID to clean up
     */
    public void cleanupRoom(String roomId) {
        roomLastAudioTimestamp.remove(roomId);
    }
}

================
File: backend/src/main/java/com/audiosync/backend/service/RoomService.java
================
package com.audiosync.backend.service;

import com.audiosync.backend.model.AudioSource;
import com.audiosync.backend.model.ConnectionQuality;
import com.audiosync.backend.model.Device;
import com.audiosync.backend.model.Room;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@Service
public class RoomService {
    private static final Logger logger = LoggerFactory.getLogger(RoomService.class);

    private final Map<String, Room> rooms = new ConcurrentHashMap<>();
    private final Map<String, String> roomCodeToId = new ConcurrentHashMap<>();
    
    private AudioStreamingService audioStreamingService;
    
    @Autowired
    public void setAudioStreamingService(@Lazy AudioStreamingService audioStreamingService) {
        this.audioStreamingService = audioStreamingService;
    }

    public Room createRoom(String hostId) {
        Room room = new Room(hostId);
        rooms.put(room.getId(), room);
        roomCodeToId.put(room.getCode(), room.getId());
        return room;
    }

    public Optional<Room> getRoomByCode(String code) {
        String roomId = roomCodeToId.get(code);
        if (roomId == null) {
            return Optional.empty();
        }
        return Optional.ofNullable(rooms.get(roomId));
    }

    public Optional<Room> getRoomById(String roomId) {
        return Optional.ofNullable(rooms.get(roomId));
    }

    public Device addDeviceToRoom(String roomId, String deviceId, String deviceName) {
        Room room = rooms.get(roomId);
        if (room == null) {
            return null;
        }

        Device device = new Device(deviceId, deviceName);
        room.addDevice(device);
        return device;
    }

    public boolean removeDeviceFromRoom(String roomId, String deviceId) {
        Room room = rooms.get(roomId);
        if (room == null) {
            return false;
        }

        room.removeDevice(deviceId);
        return true;
    }

    public boolean setAudioSource(String roomId, AudioSource audioSource) {
        Room room = rooms.get(roomId);
        if (room == null) {
            return false;
        }

        room.setAudioSource(audioSource);
        return true;
    }

    public boolean setPlaybackState(String roomId, boolean isPlaying, long timestamp) {
        Room room = rooms.get(roomId);
        if (room == null) {
            return false;
        }

        room.setPlaying(isPlaying);
        room.updatePlaybackTime(timestamp);
        return true;
    }

    public boolean setMasterVolume(String roomId, int volume) {
        Room room = rooms.get(roomId);
        if (room == null) {
            return false;
        }

        room.setMasterVolume(Math.max(0, Math.min(100, volume)));
        return true;
    }

    public boolean setDeviceVolume(String roomId, String deviceId, int volume) {
        Room room = rooms.get(roomId);
        if (room == null) {
            return false;
        }

        Device device = room.getDevice(deviceId);
        if (device == null) {
            return false;
        }

        device.setVolume(Math.max(0, Math.min(100, volume)));
        return true;
    }

    public boolean updateDeviceLatency(String roomId, String deviceId, int latency) {
        Room room = rooms.get(roomId);
        if (room == null) {
            return false;
        }

        Device device = room.getDevice(deviceId);
        if (device == null) {
            return false;
        }

        device.updateLatency(latency);
        return true;
    }

    public boolean updateDeviceHeartbeat(String roomId, String deviceId) {
        Room room = rooms.get(roomId);
        if (room == null) {
            return false;
        }

        Device device = room.getDevice(deviceId);
        if (device == null) {
            return false;
        }

        device.updateHeartbeat();
        return true;
    }

    public List<Device> getActiveDevices(String roomId) {
        Room room = rooms.get(roomId);
        if (room == null) {
            return List.of();
        }

        return room.getDevices().stream()
                .filter(Device::isActive)
                .collect(Collectors.toList());
    }

    public void cleanupInactiveDevices() {
        rooms.values().forEach(room -> {
            room.getDevices().stream()
                    .filter(device -> !device.isActive())
                    .forEach(device -> {
                        device.setConnectionQuality(ConnectionQuality.DISCONNECTED);
                    });
        });
    }

    public void removeRoom(String roomId) {
        Room room = rooms.remove(roomId);
        if (room != null) {
            roomCodeToId.remove(room.getCode());
            
            // Clean up audio streaming resources for this room
            if (audioStreamingService != null) {
                audioStreamingService.cleanupRoom(roomId);
                logger.info("Removed room and cleaned up audio resources: {}", roomId);
            }
        }
    }
    
    /**
     * Removes rooms that have no active devices
     */
    public void cleanupEmptyRooms() {
        List<String> emptyRoomIds = rooms.entrySet().stream()
                .filter(entry -> entry.getValue().getDevices().stream().noneMatch(Device::isActive))
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());
        
        emptyRoomIds.forEach(this::removeRoom);
    }
    
    /**
     * Returns all rooms created by a specific host
     * @param hostId the ID of the host
     * @return list of rooms created by the host
     */
    public List<Room> getRoomsByHost(String hostId) {
        return rooms.values().stream()
                .filter(room -> room.getHostId().equals(hostId))
                .collect(Collectors.toList());
    }
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/AudioDataMessage.java
================
package com.audiosync.backend.websocket;

import lombok.Data;
import lombok.Getter;
import lombok.Setter;

@Data
@Getter
@Setter
public class AudioDataMessage {
    private String roomId;
    private String deviceId;
    private byte[] audioData;
    private long timestamp;
    private int sampleRate;
    private int channels;
    private String encoding; // e.g., "PCM", "MP3", etc.
    
    public String getRoomId() {
        return roomId;
    }
    
    public String getDeviceId() {
        return deviceId;
    }
    
    public byte[] getAudioData() {
        return audioData;
    }
    
    public long getTimestamp() {
        return timestamp;
    }
    
    public int getSampleRate() {
        return sampleRate;
    }
    
    public int getChannels() {
        return channels;
    }
    
    public String getEncoding() {
        return encoding;
    }
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/AudioSourceMessage.java
================
package com.audiosync.backend.websocket;

import com.audiosync.backend.model.AudioSource.AudioSourceType;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

@Data
@Getter
@Setter
public class AudioSourceMessage {
    private String roomId;
    private String deviceId;
    private AudioSourceType sourceType;
    private String sourceId;
    private String sourceUrl;
    private long duration;
    
    public String getRoomId() {
        return roomId;
    }
    
    public String getDeviceId() {
        return deviceId;
    }
    
    public AudioSourceType getSourceType() {
        return sourceType;
    }
    
    public String getSourceId() {
        return sourceId;
    }
    
    public String getSourceUrl() {
        return sourceUrl;
    }
    
    public long getDuration() {
        return duration;
    }
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/DeviceUpdateMessage.java
================
package com.audiosync.backend.websocket;

import com.audiosync.backend.model.ConnectionQuality;
import lombok.Data;

@Data
public class DeviceUpdateMessage {
    private String deviceId;
    private String deviceName;
    private ConnectionQuality connectionQuality;
    private int latency;
    private int volume;
    private String action; // JOIN, LEAVE, UPDATE
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/HeartbeatMessage.java
================
package com.audiosync.backend.websocket;

import lombok.Data;

@Data
public class HeartbeatMessage {
    private String roomId;
    private String deviceId;
    private long timestamp;
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/JoinRoomMessage.java
================
package com.audiosync.backend.websocket;

import lombok.Data;

@Data
public class JoinRoomMessage {
    private String roomCode;
    private String deviceId;
    private String deviceName;
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/LatencyMessage.java
================
package com.audiosync.backend.websocket;

import lombok.Data;

@Data
public class LatencyMessage {
    private String roomId;
    private String deviceId;
    private int latency;
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/LeaveRoomMessage.java
================
package com.audiosync.backend.websocket;

import lombok.Data;

@Data
public class LeaveRoomMessage {
    private String roomId;
    private String deviceId;
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/PlaybackControlMessage.java
================
package com.audiosync.backend.websocket;

import lombok.Data;

@Data
public class PlaybackControlMessage {
    private String roomId;
    private String deviceId;
    private boolean isPlaying;
    private long timestamp;
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/RoomInfoMessage.java
================
package com.audiosync.backend.websocket;

import com.audiosync.backend.model.AudioSource;
import lombok.Data;

@Data
public class RoomInfoMessage {
    private String roomId;
    private String roomCode;
    private boolean isPlaying;
    private long currentTimestamp;
    private int masterVolume;
    private AudioSource audioSource;
}

================
File: backend/src/main/java/com/audiosync/backend/websocket/VolumeControlMessage.java
================
package com.audiosync.backend.websocket;

import lombok.Data;

@Data
public class VolumeControlMessage {
    private String roomId;
    private String deviceId;
    private String targetDeviceId; // null for master volume
    private int volume;
}

================
File: backend/src/main/java/com/audiosync/backend/AudioSyncApplication.java
================
package com.audiosync.backend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AudioSyncApplication {

	public static void main(String[] args) {
		SpringApplication.run(AudioSyncApplication.class, args);
	}

}

================
File: backend/src/main/resources/application.properties
================
server.port=8080
spring.application.name=audio-sync-backend

# WebSocket configuration
spring.websocket.max-text-message-size=65536
spring.websocket.max-binary-message-size=1048576

# CORS configuration
spring.mvc.cors.allowed-origins=*
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.mvc.cors.allowed-headers=*

================
File: backend/pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.0</version>
		<relativePath/>
	</parent>
	<groupId>com.audiosync</groupId>
	<artifactId>backend</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>AudioSync Backend</name>
	<description>Real-time audio synchronization backend</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>

================
File: src/app/client/layout.tsx
================
import { Navbar } from "@/components/navbar";

export default function ClientLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Navbar />
      {children}
    </>
  );
}

================
File: src/app/client/page.tsx
================
"use client";

import { useState, useEffect, useRef } from "react";
import { useSearchParams } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Slider } from "@/components/ui/slider";
import { Volume2 } from "lucide-react";
import { AudioPlayer } from "@/components/audio-player";
import { AudioVisualizer } from "@/components/audio-visualizer";
import { getAudioSyncClient } from "@/lib/audio-sync-client";
import { AudioSource } from "@/lib/audio-sync";
import { useToast } from "@/components/ui/use-toast";

export default function ClientPage() {
  const { toast } = useToast();
  const searchParams = useSearchParams();
  const [roomCode, setRoomCode] = useState(
    searchParams?.get("code") || ""
  );
  const [deviceName, setDeviceName] = useState(
    typeof localStorage !== "undefined"
      ? localStorage.getItem("deviceName") || `Device-${Math.floor(Math.random() * 1000)}`
      : `Device-${Math.floor(Math.random() * 1000)}`
  );
  const [isConnected, setIsConnected] = useState(false);
  const [isJoining, setIsJoining] = useState(false);
  const [volume, setVolume] = useState([70]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTimestamp, setCurrentTimestamp] = useState(0);
  const [audioSource, setAudioSource] = useState<AudioSource | null>(null);
  const [connectionQuality, setConnectionQuality] = useState<"good" | "medium" | "poor" | "disconnected">("disconnected");
  const [latency, setLatency] = useState(0);

  // Initialize audio sync client
  useEffect(() => {
    const audioSyncClient = getAudioSyncClient({
      onRoomJoined: (room) => {
        setIsConnected(true);
        setIsJoining(false);
        // Set connection quality to good when successfully joined
        setConnectionQuality("good");
        toast({
          title: "Connected to Room",
          description: `Successfully joined room ${room.code}`,
        });
      },
      onRoomLeft: () => {
        setIsConnected(false);
        setAudioSource(null);
        setConnectionQuality("disconnected");
        toast({
          title: "Disconnected",
          description: "You have left the room",
        });
      },
      onPlaybackChanged: (isPlaying, timestamp) => {
        setIsPlaying(isPlaying);
        setCurrentTimestamp(timestamp);
      },
      onVolumeChanged: (volume) => {
        setVolume([volume]);
      },
      onAudioSourceChanged: (source) => {
        setAudioSource(source);
        toast({
          title: "Audio Source Changed",
          description: `Host changed audio source to ${source.type}`,
        });
      },
      // Add audio data handler
      onAudioData: (audioData, timestamp, metadata) => {
        console.log(`Received audio data at timestamp ${timestamp}, metadata:`, metadata);
        
        try {
          // Create a simple audio element to play the audio
          // This is a much simpler approach than using the Web Audio API
          const audio = new Audio();
          
          // Convert the audio data to a base64 URL
          let base64Data;
          if (typeof audioData === 'string') {
            base64Data = audioData;
          } else {
            // Convert ArrayBuffer to base64 string
            const bytes = new Uint8Array(audioData);
            let binary = '';
            for (let i = 0; i < bytes.byteLength; i++) {
              binary += String.fromCharCode(bytes[i]);
            }
            base64Data = window.btoa(binary);
          }
          
          // Create a data URL for the audio
          // Using WAV format as specified in the audio-sync-client.ts
          const dataUrl = `data:audio/wav;base64,${base64Data}`;
          audio.src = dataUrl;
          
          // Log that we're attempting to play audio
          console.log("Setting up audio element with data URL, length:", dataUrl.length);
          
          // Play the audio
          audio.play()
            .then(() => {
              console.log("Successfully playing audio data");
              // Update connection quality to good when receiving audio data
              setConnectionQuality("good");
            })
            .catch(err => {
              console.error("Error playing audio:", err);
            });
        } catch (error) {
          console.error("Error processing audio data:", error);
        }
      },
      onConnectionQualityChanged: (quality) => {
        setConnectionQuality(quality as "good" | "medium" | "poor" | "disconnected");
      },
      onError: (error) => {
        console.error("Audio sync error:", error);
        setIsJoining(false);
        toast({
          title: "Connection Error",
          description: "Failed to connect to audio sync server",
          variant: "destructive",
        });
      },
    });

    // Connect to WebSocket server and handle auto-join
    const initializeClient = async () => {
      try {
        await audioSyncClient.connect("ws://localhost:8080/ws");
        console.log("WebSocket connection established");
        
        // Auto-join if room code is in URL
        if (searchParams?.get("code")) {
          // Small delay to ensure everything is initialized
          setTimeout(() => {
            joinRoom().catch(error => {
              console.error("Auto-join failed:", error);
            });
          }, 300);
        }
      } catch (error) {
        console.error("Failed to connect to WebSocket server:", error);
        setConnectionQuality("disconnected");
        toast({
          title: "Connection Error",
          description: "Failed to connect to audio sync server",
          variant: "destructive",
        });
      }
    };
    
    initializeClient();

    // Simulate connection quality and latency updates
    // Only update if we're connected and not too frequently
    const qualityInterval = setInterval(() => {
      if (isConnected) {
        // Update latency (10-100ms)
        setLatency(Math.floor(Math.random() * 90) + 10);
      }
    }, 10000); // Less frequent updates

    return () => {
      audioSyncClient.disconnect();
      clearInterval(qualityInterval);
    };
  }, [searchParams, toast]);

  // Save device name to localStorage
  useEffect(() => {
    if (typeof localStorage !== "undefined" && deviceName) {
      localStorage.setItem("deviceName", deviceName);
    }
  }, [deviceName]);

  const joinRoom = async () => {
    if (!roomCode) {
      toast({
        title: "Error",
        description: "Please enter a room code",
        variant: "destructive",
      });
      return;
    }

    setIsJoining(true);
    try {
      const audioSyncClient = getAudioSyncClient();
      
      // First ensure we're connected to the WebSocket server
      if (!audioSyncClient.isConnected()) {
        console.log("WebSocket not connected, connecting now...");
        await audioSyncClient.connect("ws://localhost:8080/ws");
      }
      
      console.log("Attempting to join room with code:", roomCode);
      
      // Then join the room
      await audioSyncClient.joinRoom(roomCode, deviceName);
      
      // Explicitly update UI state on successful join
      console.log("Join room promise resolved, updating UI state");
      setIsConnected(true);
      setConnectionQuality("good");  // Set connection quality to good (lowercase to match type)
      setIsJoining(false);
      toast({
        title: "Connected to Room",
        description: `Successfully joined room ${roomCode}`,
      });
      
      // Still set a timeout just in case the UI doesn't update properly
      const timeout = setTimeout(() => {
        if (isJoining) {
          console.log("Join room timeout triggered, forcing UI update");
          setIsJoining(false);
          toast({
            title: "Error",
            description: "Join room request timed out",
            variant: "destructive",
          });
        }
      }, 10000); // 10 second timeout
      
      return () => clearTimeout(timeout);
    } catch (error) {
      console.error("Failed to join room:", error);
      setIsJoining(false);
      toast({
        title: "Error",
        description: typeof error === 'string' ? error : (error as Error).message || "Failed to join room",
        variant: "destructive",
      });
    }
  };

  const leaveRoom = () => {
    try {
      const audioSyncClient = getAudioSyncClient();
      audioSyncClient.leaveRoom();
      setIsConnected(false);
    } catch (error) {
      console.error("Failed to leave room:", error);
    }
  };

  const handleVolumeChange = (newVolume: number[]) => {
    setVolume(newVolume);

    try {
      const audioSyncClient = getAudioSyncClient();
      audioSyncClient.setDeviceVolume(newVolume[0]);
    } catch (error) {
      console.error("Failed to update volume:", error);
    }
  };

  const getConnectionQualityText = () => {
    switch (connectionQuality) {
      case "good":
        return "Good";
      case "medium":
        return "Medium";
      case "poor":
        return "Poor";
      default:
        return "Disconnected";
    }
  };

  const getConnectionQualityColor = () => {
    switch (connectionQuality) {
      case "good":
        return "text-green-500";
      case "medium":
        return "text-yellow-500";
      case "poor":
        return "text-red-500";
      default:
        return "text-gray-500";
    }
  };

  return (
    <div className="container mx-auto py-8 bg-background">
      <h1 className="text-4xl font-extrabold tracking-tight lg:text-5xl mb-8 text-center">
        Audio Sync Client
      </h1>

      {!isConnected ? (
        <Card className="max-w-md mx-auto">
          <CardHeader>
            <div className="flex items-center justify-center h-12 w-12 rounded-full bg-primary/10 mb-4 mx-auto">
              <Volume2 className="h-6 w-6 text-primary" />
            </div>
            <CardTitle className="text-center">Join a Room</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Your Device Name</label>
              <Input
                value={deviceName}
                onChange={(e) => setDeviceName(e.target.value)}
                placeholder="Enter your device name"
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Room Code</label>
              <Input
                value={roomCode}
                onChange={(e) => setRoomCode(e.target.value.toUpperCase())}
                placeholder="Enter room code"
                className="uppercase"
                maxLength={6}
              />
            </div>
            <Button
              className="w-full"
              onClick={joinRoom}
              disabled={isJoining}
            >
              {isJoining ? (
                <>
                  <Volume2 className="mr-2 h-4 w-4 animate-spin" />
                  Joining...
                </>
              ) : (
                "Join Room"
              )}
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto">
          <Card>
            <CardHeader>
              <CardTitle>Audio Playback</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="w-full h-24 bg-card rounded-lg mb-6 overflow-hidden">
                <AudioVisualizer
                  isPlaying={isPlaying}
                  className="w-full h-full"
                />
              </div>
              {audioSource && (
                <div className="mb-4 text-center">
                  <p className="text-sm font-medium">
                    Now playing: {(audioSource as any).sourceId || audioSource.type || 'Unknown'}
                  </p>
                </div>
              )}
              <AudioPlayer
                isHost={false}
                audioUrl={audioSource?.files?.[0] ? URL.createObjectURL(audioSource.files[0]) : undefined}
                audioStream={audioSource?.stream}
                externalPlayState={isPlaying}
                externalTimestamp={currentTimestamp}
                className="max-w-md mx-auto"
              />
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Connection Settings</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Room Code:</span>
                  <span className="text-lg font-bold tracking-widest">{roomCode}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Device Name:</span>
                  <span>{deviceName}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Connection Quality:</span>
                  <span className={getConnectionQualityColor()}>
                    {getConnectionQualityText()}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium">Latency:</span>
                  <span>{latency}ms</span>
                </div>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Device Volume</label>
                <div className="flex items-center gap-4 w-full">
                  <Volume2 size={20} className="text-muted-foreground" />
                  <Slider
                    value={volume}
                    onValueChange={handleVolumeChange}
                    max={100}
                    step={1}
                    className="flex-1"
                  />
                  <span className="text-sm text-muted-foreground w-8 text-right">
                    {volume[0]}%
                  </span>
                </div>
              </div>

              <Button
                variant="outline"
                className="w-full"
                onClick={leaveRoom}
              >
                Leave Room
              </Button>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}

================
File: src/app/host/layout.tsx
================
import { Navbar } from "@/components/navbar";

export default function HostLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Navbar />
      {children}
    </>
  );
}

================
File: src/app/host/page.tsx
================
"use client";

import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
// Replace Lucide React icons with React Icons
import { FaMicrophone as Mic } from "react-icons/fa";
import { FaMusic as Music } from "react-icons/fa";
import { FaVolumeUp as Speaker } from "react-icons/fa";
import { FaPlay as Play } from "react-icons/fa";
import { FaPause as Pause } from "react-icons/fa";
import { FaForward as SkipForward } from "react-icons/fa";
import { FaVolumeDown as Volume2 } from "react-icons/fa";
import { FaSync as RefreshCw } from "react-icons/fa";
import { Slider } from "@/components/ui/slider";
import { QRCode } from "@/components/qr-code";
import { DeviceList } from "@/components/device-list";
import { AudioPlayer } from "@/components/audio-player";
import { getAudioSyncClient } from "@/lib/audio-sync-client";
import { AudioSource, SyncedDevice } from "@/lib/audio-sync";
import { useToast } from "@/components/ui/use-toast";

export default function HostPage() {
  const { toast } = useToast();
  const [roomCode, setRoomCode] = useState("");
  const [isPlaying, setIsPlaying] = useState(false);
  const [volume, setVolume] = useState([80]);
  const [selectedSource, setSelectedSource] = useState("files");
  const [connectedDevices, setConnectedDevices] = useState<SyncedDevice[]>([]);
  const [isConnected, setIsConnected] = useState(false);
  const [isCreatingRoom, setIsCreatingRoom] = useState(false);
  const [audioSource, setAudioSource] = useState<AudioSource | null>(null);
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  const [audioStream, setAudioStream] = useState<MediaStream | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Initialize audio sync client
  useEffect(() => {
    const audioSyncClient = getAudioSyncClient({
      onRoomJoined: (room) => {
        setRoomCode(room.code);
        setIsConnected(true);
        setIsCreatingRoom(false);
        toast({
          title: "Room Created",
          description: `Room code: ${room.code}`,
        });
      },
      onDeviceConnected: (device) => {
        setConnectedDevices((prev) => [...prev, device]);
        toast({
          title: "Device Connected",
          description: `${device.name} has joined the room`,
        });
      },
      onDeviceDisconnected: (deviceId) => {
        setConnectedDevices((prev) => prev.filter((d) => d.id !== deviceId));
      },
      onDeviceUpdated: (device) => {
        setConnectedDevices((prev) =>
          prev.map((d) => (d.id === device.id ? device : d)),
        );
      },
      onError: (error) => {
        console.error("Audio sync error:", error);
        toast({
          title: "Connection Error",
          description: "Failed to connect to audio sync server",
          variant: "destructive",
        });
      },
    });

    // Connect to WebSocket server
    audioSyncClient
      .connect("ws://localhost:8080/ws")
      .catch((error) => console.error("Failed to connect:", error));

    return () => {
      audioSyncClient.disconnect();
    };
  }, [toast]);

  const createRoom = async () => {
    setIsCreatingRoom(true);
    try {
      const audioSyncClient = getAudioSyncClient();
      const room = await audioSyncClient.createRoom();
      
      // Update local state with room information
      setRoomCode(room.code);
      setIsConnected(true);
      setIsCreatingRoom(false);
      
      toast({
        title: "Room Created",
        description: `Room code: ${room.code}`,
      });
      
      return room;
    } catch (error) {
      console.error("Failed to create room:", error);
      setIsCreatingRoom(false);
      toast({
        title: "Error",
        description: typeof error === 'string' ? error : (error as Error).message || "Failed to create room",
        variant: "destructive",
      });
      throw error; // Re-throw to allow handling in the useEffect
    }
  };

  useEffect(() => {
    const initializeRoom = async () => {
      try {
        // First ensure we're connected to the WebSocket server
        const audioSyncClient = getAudioSyncClient();
        await audioSyncClient.connect();
        
        // Then create the room
        await createRoom();
      } catch (error) {
        console.error("Failed to initialize room:", error);
        setIsCreatingRoom(false);
        toast({
          title: "Error",
          description: "Failed to initialize: " + (error as Error).message,
          variant: "destructive",
        });
      }
    };
    
    initializeRoom();
  }, []);

  const handlePlayPause = (playing: boolean, currentTime: number) => {
    setIsPlaying(playing);

    try {
      const audioSyncClient = getAudioSyncClient();
      audioSyncClient.setPlaybackState(playing, currentTime);
    } catch (error) {
      console.error("Failed to update playback state:", error);
    }
  };

  const handleVolumeChange = (newVolume: number) => {
    setVolume([newVolume]);

    try {
      const audioSyncClient = getAudioSyncClient();
      audioSyncClient.setMasterVolume(newVolume);
    } catch (error) {
      console.error("Failed to update volume:", error);
    }
  };

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    const file = files[0];
    const url = URL.createObjectURL(file);
    setAudioUrl(url);

    const newAudioSource: AudioSource = {
      type: "file",
      files: [file],
    };

    setAudioSource(newAudioSource);

    try {
      const audioSyncClient = getAudioSyncClient();
      audioSyncClient.setAudioSource(newAudioSource);
    } catch (error) {
      console.error("Failed to set audio source:", error);
    }
  };

  const handleMicrophoneAccess = async () => {
    try {
      // Check if the browser supports getUserMedia
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error("Your browser doesn't support microphone access");
      }
      
      // Request microphone access with specific constraints
      const constraints = {
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      };
      
      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      setAudioStream(stream);

      const newAudioSource: AudioSource = {
        type: "microphone",
        stream,
      };

      setAudioSource(newAudioSource);

      try {
        const audioSyncClient = getAudioSyncClient();
        audioSyncClient.setAudioSource(newAudioSource);
        
        // Start processing the audio stream for transmission
        if (audioSyncClient.processLiveAudioSource) {
          const stopProcessing = audioSyncClient.processLiveAudioSource(stream);
          // Store the stop function for cleanup
          return () => {
            stopProcessing();
            stream.getTracks().forEach(track => track.stop());
          };
        }
      } catch (error) {
        console.error("Failed to set audio source:", error);
        stream.getTracks().forEach(track => track.stop());
      }

      toast({
        title: "Microphone Access Granted",
        description: "You can now stream audio from your microphone",
      });
    } catch (error) {
      console.error("Failed to access microphone:", error);
      toast({
        title: "Microphone Access Denied",
        description: typeof error === 'object' && error !== null && 'message' in error ? 
          String(error.message) : "Please allow microphone access to use this feature",
        variant: "destructive",
      });
    }
  };

  const handleSystemAudioAccess = async () => {
    try {
      // This is a simplified version - actual system audio capture requires more complex setup
      // and may not be supported in all browsers
      toast({
        title: "System Audio Capture",
        description:
          "System audio capture is not fully implemented in this demo",
      });
    } catch (error) {
      console.error("Failed to access system audio:", error);
      toast({
        title: "System Audio Access Failed",
        description: "System audio capture is not supported in your browser",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="container mx-auto py-8 bg-background">
      <h1 className="text-4xl font-extrabold tracking-tight lg:text-5xl mb-8 text-center">
        Audio Sync Host
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>Audio Source</CardTitle>
          </CardHeader>
          <CardContent>
            <Tabs
              defaultValue={selectedSource}
              onValueChange={setSelectedSource}
              className="w-full"
            >
              <TabsList className="grid grid-cols-3 mb-4">
                <TabsTrigger value="files" className="flex items-center gap-2">
                  <Music size={16} /> Files
                </TabsTrigger>
                <TabsTrigger
                  value="microphone"
                  className="flex items-center gap-2"
                >
                  <Mic size={16} /> Microphone
                </TabsTrigger>
                <TabsTrigger value="system" className="flex items-center gap-2">
                  <Speaker size={16} /> System Audio
                </TabsTrigger>
              </TabsList>

              <TabsContent value="files" className="space-y-4">
                <div className="border-2 border-dashed border-border rounded-lg p-8 text-center">
                  <Music className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                  <h3 className="text-lg font-medium mb-2">
                    Drop audio files here
                  </h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    or click to browse
                  </p>
                  <input
                    type="file"
                    ref={fileInputRef}
                    onChange={handleFileSelect}
                    accept="audio/*"
                    className="hidden"
                  />
                  <Button onClick={() => fileInputRef.current?.click()}>
                    Select Files
                  </Button>
                </div>
              </TabsContent>

              <TabsContent value="microphone">
                <div className="text-center p-8">
                  <Mic className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                  <h3 className="text-lg font-medium mb-2">Use Microphone</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    Stream audio from your microphone
                  </p>
                  <Button onClick={handleMicrophoneAccess}>
                    Grant Microphone Access
                  </Button>
                </div>
              </TabsContent>

              <TabsContent value="system">
                <div className="text-center p-8">
                  <Speaker className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                  <h3 className="text-lg font-medium mb-2">System Audio</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    Stream audio from your system
                  </p>
                  <Button onClick={handleSystemAudioAccess}>
                    Grant System Audio Access
                  </Button>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Room Information</CardTitle>
          </CardHeader>
          <CardContent className="flex flex-col items-center">
            <div className="mb-4 bg-white p-2 rounded-lg">
              <QRCode
                value={`https://modest-maxwell3-935yc.dev-2.tempolabs.ai/client?code=${roomCode}`}
                size={180}
              />
            </div>
            <div className="text-center mb-4">
              <p className="text-sm text-muted-foreground mb-1">Room Code:</p>
              <p className="text-2xl font-bold tracking-widest">{roomCode}</p>
            </div>
            <Button
              className="w-full"
              onClick={createRoom}
              disabled={isCreatingRoom}
            >
              {isCreatingRoom ? (
                <>
                  <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                  Creating...
                </>
              ) : (
                "Create New Room"
              )}
            </Button>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mt-8">
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>Playback Controls</CardTitle>
          </CardHeader>
          <CardContent>
            {audioSource?.files && audioSource.files.length > 0 && (
              <div className="mb-4 text-center">
                <p className="text-sm font-medium">
                  Now playing: {audioSource.files[0].name}
                </p>
              </div>
            )}
            <AudioPlayer
              audioUrl={audioUrl || undefined}
              audioStream={audioStream || undefined}
              isHost={true}
              onPlayPause={handlePlayPause}
              onVolumeChange={handleVolumeChange}
              className="max-w-md mx-auto"
            />
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Connected Devices</CardTitle>
          </CardHeader>
          <CardContent>
            <DeviceList
              devices={connectedDevices}
              onRemoveDevice={(deviceId) => {
                // In a real implementation, you would send a message to remove the device
                setConnectedDevices((prev) =>
                  prev.filter((d) => d.id !== deviceId),
                );
              }}
            />
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import { TempoInit } from "@/components/tempo-init";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import Script from "next/script";
import { ThemeProvider } from "@/components/theme-provider";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Audio Sync - Multi-Device Audio Synchronization",
  description: "Transform multiple devices into a synchronized sound system",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <Script src="https://api.tempolabs.ai/proxy-asset?url=https://storage.googleapis.com/tempo-public-assets/error-handling.js" />
      <body className={inter.className}>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
          <main className="min-h-screen">{children}</main>
        </ThemeProvider>
        <TempoInit />
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Headphones, Radio } from "lucide-react";

export default function HomePage() {
  return (
    <div className="container mx-auto py-12 px-4 bg-background">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-extrabold tracking-tight lg:text-5xl mb-4">
          Multi-Device Audio Sync
        </h1>
        <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
          Transform multiple devices into a synchronized sound system with
          perfect timing alignment
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto">
        <Card>
          <CardHeader>
            <div className="flex items-center justify-center h-12 w-12 rounded-full bg-primary/10 mb-4">
              <Radio className="h-6 w-6 text-primary" />
            </div>
            <CardTitle>Host a Room</CardTitle>
            <CardDescription>
              Create a new audio room and control playback across all connected
              devices
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 text-sm">
              <li className="flex items-start gap-2">
                <span className="rounded-full h-5 w-5 flex items-center justify-center bg-primary/10 text-xs">
                  ✓
                </span>
                <span>
                  Select audio from files, microphone, or system audio
                </span>
              </li>
              <li className="flex items-start gap-2">
                <span className="rounded-full h-5 w-5 flex items-center justify-center bg-primary/10 text-xs">
                  ✓
                </span>
                <span>
                  Control playback and volume for all connected devices
                </span>
              </li>
              <li className="flex items-start gap-2">
                <span className="rounded-full h-5 w-5 flex items-center justify-center bg-primary/10 text-xs">
                  ✓
                </span>
                <span>Monitor connection quality of all devices</span>
              </li>
            </ul>
          </CardContent>
          <CardFooter>
            <Link href="/host" className="w-full">
              <Button className="w-full">Host a Room</Button>
            </Link>
          </CardFooter>
        </Card>

        <Card>
          <CardHeader>
            <div className="flex items-center justify-center h-12 w-12 rounded-full bg-primary/10 mb-4">
              <Headphones className="h-6 w-6 text-primary" />
            </div>
            <CardTitle>Join a Room</CardTitle>
            <CardDescription>
              Connect to an existing audio room and receive synchronized audio
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 text-sm">
              <li className="flex items-start gap-2">
                <span className="rounded-full h-5 w-5 flex items-center justify-center bg-primary/10 text-xs">
                  ✓
                </span>
                <span>Join by entering a room code or scanning a QR code</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="rounded-full h-5 w-5 flex items-center justify-center bg-primary/10 text-xs">
                  ✓
                </span>
                <span>Adjust your individual device volume</span>
              </li>
              <li className="flex items-start gap-2">
                <span className="rounded-full h-5 w-5 flex items-center justify-center bg-primary/10 text-xs">
                  ✓
                </span>
                <span>View real-time audio visualization and sync status</span>
              </li>
            </ul>
          </CardContent>
          <CardFooter>
            <Link href="/client" className="w-full">
              <Button className="w-full" variant="outline">
                Join a Room
              </Button>
            </Link>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
}

================
File: src/components/ui/accordion.tsx
================
import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDownIcon } from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      "overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
      className,
    )}
    {...props}
  >
    <div className="pb-4 pt-0">{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };

================
File: src/components/ui/alert-dialog.tsx
================
import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "../../lib/utils";
import { buttonVariants } from "../../components/ui/button";

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = ({
  ...props
}: AlertDialogPrimitive.AlertDialogPortalProps) => (
  <AlertDialogPrimitive.Portal {...props} />
);
AlertDialogPortal.displayName = AlertDialogPrimitive.Portal.displayName;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full",
        className,
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className,
    )}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};

================
File: src/components/ui/alert.tsx
================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&:has(svg)]:pl-11 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };

================
File: src/components/ui/aspect-ratio.tsx
================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio";

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };

================
File: src/components/ui/avatar.tsx
================
import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "../../lib/utils";
const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };

================
File: src/components/ui/badge.tsx
================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };

================
File: src/components/ui/button.tsx
================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };

================
File: src/components/ui/calendar.tsx
================
import * as React from "react";
import { ChevronLeftIcon, ChevronRightIcon } from "@radix-ui/react-icons";
import { DayPicker } from "react-day-picker";

import { buttonVariants } from "../../components/ui/button";
import { cn } from "@/lib/utils";

export type CalendarProps = React.ComponentProps<typeof DayPicker> & {date?: number};

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "text-center text-sm p-0 relative [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100",
        ),
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside: "text-muted-foreground opacity-50",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      // components={{
      //   IconLeft: ({ ...props }) => <ChevronLeftIcon className="h-4 w-4" />,
      //   IconRight: ({ ...props }) => <ChevronRightIcon className="h-4 w-4" />,
      // }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };

================
File: src/components/ui/card.tsx
================
import * as React from "react";

import { cn } from "../../lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(" flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};

================
File: src/components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: src/components/ui/checkbox.tsx
================
import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { CheckIcon } from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <CheckIcon className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };

================
File: src/components/ui/collapsible.tsx
================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };

================
File: src/components/ui/command.tsx
================
import * as React from "react";
import { DialogProps } from "@radix-ui/react-dialog";
import { MagnifyingGlassIcon } from "@radix-ui/react-icons";
import { Command as CommandPrimitive } from "cmdk";

import { cn } from "../../lib/utils";
import { Dialog, DialogContent } from "../../components/ui/dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <MagnifyingGlassIcon className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};

================
File: src/components/ui/context-menu.tsx
================
import * as React from "react";
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
ContextMenuShortcut.displayName = "ContextMenuShortcut";

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};

================
File: src/components/ui/date-picker-with-range.tsx
================
"use client";

import * as React from "react";
import { addDays, format } from "date-fns";
import { Calendar as CalendarIcon } from "lucide-react";
import { DateRange } from "react-day-picker";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

export default function DatePickerWithRange({
  className,
}: React.HTMLAttributes<HTMLDivElement>) {
  const [date, setDate] = React.useState<DateRange | undefined>({
    from: new Date(2022, 0, 20),
    to: addDays(new Date(2022, 0, 20), 20),
  });

  return (
    <div className={cn("grid gap-2", className)}>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            id="date"
            variant={"outline"}
            className={cn(
              "w-[300px] justify-start text-left font-normal",
              !date && "text-muted-foreground",
            )}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date?.from ? (
              date.to ? (
                <>
                  {format(date.from, "LLL dd, y")} -{" "}
                  {format(date.to, "LLL dd, y")}
                </>
              ) : (
                format(date.from, "LLL dd, y")
              )
            ) : (
              <span>Pick a date</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={date?.from}
            selected={date}
            onSelect={setDate}
            numberOfMonths={2}
          />
        </PopoverContent>
      </Popover>
    </div>
  );
}

================
File: src/components/ui/dialog.tsx
================
import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = ({
  ...props
}: DialogPrimitive.DialogPortalProps) => (
  <DialogPrimitive.Portal {...props} />
);
DialogPortal.displayName = DialogPrimitive.Portal.displayName;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};

================
File: src/components/ui/drawer.tsx
================
"use client";

import { cn } from "@/lib/utils";
import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";


const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className,
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};

================
File: src/components/ui/dropdown-menu.tsx
================
import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};

================
File: src/components/ui/form.tsx
================
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form";

import { cn } from "../../lib/utils";
import { Label } from "../../components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};

================
File: src/components/ui/hover-card.tsx
================
import * as React from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";

import { cn } from "../../lib/utils";

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };

================
File: src/components/ui/icons.tsx
================
type IconProps = React.HTMLAttributes<SVGElement>;

export const Icons = {
  logo: (props: IconProps) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 256 256"
      className={props.className}
      {...props}
    >
      <rect width="256" height="256" fill="none" />
      <line
        x1="208"
        y1="128"
        x2="128"
        y2="208"
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="16"
      />
      <line
        x1="192"
        y1="40"
        x2="40"
        y2="192"
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="16"
      />
    </svg>
  ),
  twitter: (props: IconProps) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      className={props.className}
      {...props}
    >
      <path d="M21.543 7.104c.015.211.015.423.015.636 0 6.507-4.954 14.01-14.01 14.01v-.003A13.94 13.94 0 0 1 0 19.539a9.88 9.88 0 0 0 7.287-2.041 4.93 4.93 0 0 1-4.6-3.42 4.916 4.916 0 0 0 2.223-.084A4.926 4.926 0 0 1 .96 9.167v-.062a4.887 4.887 0 0 0 2.235.616A4.928 4.928 0 0 1 1.67 3.148a13.98 13.98 0 0 0 10.15 5.144 4.929 4.929 0 0 1 8.39-4.49 9.868 9.868 0 0 0 3.128-1.196 4.941 4.941 0 0 1-2.165 2.724A9.828 9.828 0 0 0 24 4.555a10.019 10.019 0 0 1-2.457 2.549z" />
    </svg>
  ),
  gitHub: (props: IconProps) => (
    <svg viewBox="0 0 438.549 438.549" className={props.className} {...props}>
      <path
        fill="currentColor"
        d="M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z"
      ></path>
    </svg>
  ),
  radix: (props: IconProps) => (
    <svg viewBox="0 0 25 25" fill="none" className={props.className} {...props}>
      <path
        d="M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z"
        fill="currentcolor"
      ></path>
      <path d="M12 0H4V8H12V0Z" fill="currentcolor"></path>
      <path
        d="M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z"
        fill="currentcolor"
      ></path>
    </svg>
  ),
  aria: (props: IconProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      fill="currentColor"
      className={props.className}
      {...props}
    >
      <path d="M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z" />
    </svg>
  ),
  npm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" className={props.className} {...props}>
      <path
        d="M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z"
        fill="currentColor"
      />
    </svg>
  ),
  yarn: (props: IconProps) => (
    <svg viewBox="0 0 24 24" className={props.className} {...props}>
      <path
        d="M12 0C5.375 0 0 5.375 0 12s5.375 12 12 12 12-5.375 12-12S18.625 0 12 0zm.768 4.105c.183 0 .363.053.525.157.125.083.287.185.755 1.154.31-.088.468-.042.551-.019.204.056.366.19.463.375.477.917.542 2.553.334 3.605-.241 1.232-.755 2.029-1.131 2.576.324.329.778.899 1.117 1.825.278.774.31 1.478.273 2.015a5.51 5.51 0 0 0 .602-.329c.593-.366 1.487-.917 2.553-.931.714-.009 1.269.445 1.353 1.103a1.23 1.23 0 0 1-.945 1.362c-.649.158-.95.278-1.821.843-1.232.797-2.539 1.242-3.012 1.39a1.686 1.686 0 0 1-.704.343c-.737.181-3.266.315-3.466.315h-.046c-.783 0-1.214-.241-1.45-.491-.658.329-1.51.19-2.122-.134a1.078 1.078 0 0 1-.58-1.153 1.243 1.243 0 0 1-.153-.195c-.162-.25-.528-.936-.454-1.946.056-.723.556-1.367.88-1.71a5.522 5.522 0 0 1 .408-2.256c.306-.727.885-1.348 1.32-1.737-.32-.537-.644-1.367-.329-2.21.227-.602.412-.936.82-1.08h-.005c.199-.074.389-.153.486-.259a3.418 3.418 0 0 1 2.298-1.103c.037-.093.079-.185.125-.283.31-.658.639-1.029 1.024-1.168a.94.94 0 0 1 .328-.06zm.006.7c-.507.016-1.001 1.519-1.001 1.519s-1.27-.204-2.266.871c-.199.218-.468.334-.746.44-.079.028-.176.023-.417.672-.371.991.625 2.094.625 2.094s-1.186.839-1.626 1.881c-.486 1.144-.338 2.261-.338 2.261s-.843.732-.899 1.487c-.051.663.139 1.2.343 1.515.227.343.51.176.51.176s-.561.653-.037.931c.477.25 1.283.394 1.71-.037.31-.31.371-1.001.486-1.283.028-.065.12.111.209.199.097.093.264.195.264.195s-.755.324-.445 1.066c.102.246.468.403 1.066.398.222-.005 2.664-.139 3.313-.296.375-.088.505-.283.505-.283s1.566-.431 2.998-1.357c.917-.598 1.293-.76 2.034-.936.612-.148.57-1.098-.241-1.084-.839.009-1.575.44-2.196.825-1.163.718-1.742.672-1.742.672l-.018-.032c-.079-.13.371-1.293-.134-2.678-.547-1.515-1.413-1.881-1.344-1.997.297-.5 1.038-1.297 1.334-2.78.176-.899.13-2.377-.269-3.151-.074-.144-.732.241-.732.241s-.616-1.371-.788-1.483a.271.271 0 0 0-.157-.046z"
        fill="currentColor"
      />
    </svg>
  ),
  pnpm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" className={props.className} {...props}>
      <path
        d="M0 0v7.5h7.5V0zm8.25 0v7.5h7.498V0zm8.25 0v7.5H24V0zM8.25 8.25v7.5h7.498v-7.5zm8.25 0v7.5H24v-7.5zM0 16.5V24h7.5v-7.5zm8.25 0V24h7.498v-7.5zm8.25 0V24H24v-7.5z"
        fill="currentColor"
      />
    </svg>
  ),
  react: (props: IconProps) => (
    <svg viewBox="0 0 24 24" className={props.className} {...props}>
      <path
        d="M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z"
        fill="currentColor"
      />
    </svg>
  ),
  tailwind: (props: IconProps) => (
    <svg viewBox="0 0 24 24" className={props.className} {...props}>
      <path
        d="M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 C13.666,10.618,15.027,12,18.001,12c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C16.337,6.182,14.976,4.8,12.001,4.8z M6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 c1.177,1.194,2.538,2.576,5.512,2.576c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C10.337,13.382,8.976,12,6.001,12z"
        fill="currentColor"
      />
    </svg>
  ),
  google: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" className={props.className} {...props}>
      <path
        fill="currentColor"
        d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
      />
    </svg>
  ),
  apple: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" className={props.className} {...props}>
      <path
        d="M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701"
        fill="currentColor"
      />
    </svg>
  ),
  paypal: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" className={props.className} {...props}>
      <path
        d="M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.254-.93 4.778-4.005 7.201-9.138 7.201h-2.19a.563.563 0 0 0-.556.479l-1.187 7.527h-.506l-.24 1.516a.56.56 0 0 0 .554.647h3.882c.46 0 .85-.334.922-.788.06-.26.76-4.852.816-5.09a.932.932 0 0 1 .923-.788h.58c3.76 0 6.705-1.528 7.565-5.946.36-1.847.174-3.388-.777-4.471z"
        fill="currentColor"
      />
    </svg>
  ),
  spinner: (props: IconProps) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={props.className}
      {...props}
    >
      <path d="M21 12a9 9 0 1 1-6.219-8.56" />
    </svg>
  ),
};

================
File: src/components/ui/input.tsx
================
import * as React from "react";

import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };

================
File: src/components/ui/label.tsx
================
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };

================
File: src/components/ui/menubar.tsx
================
import * as React from "react";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";
import * as MenubarPrimitive from "@radix-ui/react-menubar";

import { cn } from "../../lib/utils";

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className,
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className,
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref,
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className,
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  ),
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from "react";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";

import { cn } from "../../lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className,
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className,
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className,
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};

================
File: src/components/ui/pagination.tsx
================
import * as React from "react";
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  DotsHorizontalIcon,
} from "@radix-ui/react-icons";

import { cn } from "../../lib/utils";
import { ButtonProps, buttonVariants } from "../../components/ui/button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <PaginationItem>
    <a
      aria-current={isActive ? "page" : undefined}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className,
      )}
      {...props}
    />
  </PaginationItem>
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeftIcon className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRightIcon className="h-4 w-4" />
  </PaginationLink>
);

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <DotsHorizontalIcon className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
};

================
File: src/components/ui/popover.tsx
================
import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "../../lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };

================
File: src/components/ui/progress.tsx
================
import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "../../lib/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className,
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all bg-white"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };

================
File: src/components/ui/radio-group.tsx
================
import * as React from "react";
import { CheckIcon } from "@radix-ui/react-icons";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";

import { cn } from "../../lib/utils";

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, children, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <CheckIcon className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };

================
File: src/components/ui/resizable.tsx
================
"use client";

import { cn } from "@/lib/utils";
import { DragHandleDots2Icon } from "@radix-ui/react-icons";
import * as ResizablePrimitive from "react-resizable-panels";


const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className,
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <DragHandleDots2Icon className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };

================
File: src/components/ui/scroll-area.tsx
================
import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "../../lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };

================
File: src/components/ui/select.tsx
================
import * as React from "react";
import { CaretSortIcon, CheckIcon } from "@radix-ui/react-icons";
import * as SelectPrimitive from "@radix-ui/react-select";

import { cn } from "../../lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
};

================
File: src/components/ui/separator.tsx
================
import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "../../lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref,
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className,
      )}
      {...props}
    />
  ),
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };

================
File: src/components/ui/sheet.tsx
================
import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = ({
  ...props
}: SheetPrimitive.DialogPortalProps) => (
  <SheetPrimitive.Portal {...props} />
);
SheetPortal.displayName = SheetPrimitive.Portal.displayName;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "../../lib/utils";

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  );
}

export { Skeleton };

================
File: src/components/ui/slider.tsx
================
import * as React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";

import { cn } from "../../lib/utils";

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className,
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };

================
File: src/components/ui/switch.tsx
================
import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "../../lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-[20px] w-[36px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };

================
File: src/components/ui/table.tsx
================
import * as React from "react";

import { cn } from "../../lib/utils";

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("bg-primary font-medium text-primary-foreground", className)}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className,
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className,
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className,
    )}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};

================
File: src/components/ui/tabs.tsx
================
import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "../../lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };

================
File: src/components/ui/textarea.tsx
================
import * as React from "react";

import { cn } from "../../lib/utils";

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Textarea.displayName = "Textarea";

export { Textarea };

================
File: src/components/ui/toast.tsx
================
import * as React from "react";
import { Cross2Icon } from "@radix-ui/react-icons";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};

================
File: src/components/ui/toaster.tsx
================
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "../../components/ui/toast";
import { useToast } from "../../components/ui/use-toast";

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}

================
File: src/components/ui/toggle.tsx
================
import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-3",
        sm: "h-8 px-2",
        lg: "h-10 px-3",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };

================
File: src/components/ui/tooltip.tsx
================
import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "../../lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };

================
File: src/components/ui/use-toast.ts
================
// Inspired by react-hot-toast library
import * as React from "react";

import type { ToastActionElement, ToastProps } from "../../components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_VALUE;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };

================
File: src/components/audio-playback.tsx
================
import React, { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';
import { AudioDataMetadata } from '@/lib/audio-sync-client';

interface AudioPlaybackProps {
  isPlaying: boolean;
  volume: number;
  onPlaybackError?: (error: Error) => void;
}

export interface AudioPlaybackHandle {
  addAudioData: (data: ArrayBuffer, timestamp: number, metadata: AudioDataMetadata) => void;
}

const AudioPlayback = forwardRef<AudioPlaybackHandle, AudioPlaybackProps>(({
  isPlaying,
  volume,
  onPlaybackError
}, ref) => {
  const audioContextRef = useRef<AudioContext | null>(null);
  const sourceNodeRef = useRef<AudioBufferSourceNode | null>(null);
  const gainNodeRef = useRef<GainNode | null>(null);
  const analyserRef = useRef<AnalyserNode | null>(null);
  const audioBufferRef = useRef<AudioBuffer | null>(null);
  const audioDataQueueRef = useRef<Array<{data: ArrayBuffer, timestamp: number, metadata: AudioDataMetadata}>>([]);
  const startTimeRef = useRef<number>(0);
  const lastTimestampRef = useRef<number>(0);
  const bufferSizeRef = useRef<number>(300); // Default buffer size in ms
  const canvasRef = useRef<HTMLCanvasElement>(null);
  
  const [audioLevel, setAudioLevel] = useState<number>(0);
  
  // Initialize audio context
  useEffect(() => {
    try {
      audioContextRef.current = new AudioContext();
      gainNodeRef.current = audioContextRef.current.createGain();
      analyserRef.current = audioContextRef.current.createAnalyser();
      
      // Connect nodes
      gainNodeRef.current.connect(analyserRef.current);
      analyserRef.current.connect(audioContextRef.current.destination);
      
      // Set up analyser
      analyserRef.current.fftSize = 256;
      
      // Set up animation loop for visualizer
      const updateVisualizer = () => {
        if (analyserRef.current && canvasRef.current) {
          const bufferLength = analyserRef.current.frequencyBinCount;
          const dataArray = new Uint8Array(bufferLength);
          analyserRef.current.getByteFrequencyData(dataArray);
          
          // Calculate average level
          let sum = 0;
          for (let i = 0; i < bufferLength; i++) {
            sum += dataArray[i];
          }
          const average = sum / bufferLength;
          setAudioLevel(average / 255); // Normalize to 0-1
          
          // Draw visualization
          const canvas = canvasRef.current;
          const ctx = canvas.getContext('2d');
          if (ctx) {
            const width = canvas.width;
            const height = canvas.height;
            
            ctx.clearRect(0, 0, width, height);
            
            // Draw waveform
            ctx.fillStyle = '#4f46e5';
            const barWidth = width / bufferLength;
            
            for (let i = 0; i < bufferLength; i++) {
              const barHeight = (dataArray[i] / 255) * height;
              ctx.fillRect(i * barWidth, height - barHeight, barWidth, barHeight);
            }
          }
        }
        requestAnimationFrame(updateVisualizer);
      };
      
      updateVisualizer();
      
      return () => {
        if (audioContextRef.current && audioContextRef.current.state !== 'closed') {
          audioContextRef.current.close();
        }
      };
    } catch (error) {
      console.error('Error initializing audio context:', error);
      if (onPlaybackError) {
        onPlaybackError(error instanceof Error ? error : new Error(String(error)));
      }
    }
  }, [onPlaybackError]);
  
  // Handle volume changes
  useEffect(() => {
    if (gainNodeRef.current) {
      gainNodeRef.current.gain.value = volume / 100;
    }
  }, [volume]);
  
  // Process audio data queue
  const processAudioQueue = async () => {
    if (!audioContextRef.current || audioDataQueueRef.current.length === 0) return;
    
    // Sort queue by timestamp to ensure correct order
    audioDataQueueRef.current.sort((a, b) => a.timestamp - b.timestamp);
    
    // Get the next audio chunk
    const nextChunk = audioDataQueueRef.current[0];
    if (!nextChunk) return;
    
    try {
      // Decode audio data
      const audioBuffer = await audioContextRef.current.decodeAudioData(nextChunk.data);
      audioBufferRef.current = audioBuffer;
      
      // Calculate timing
      const currentTime = audioContextRef.current.currentTime;
      const timeSinceStart = (Date.now() - startTimeRef.current) / 1000;
      const targetTime = nextChunk.timestamp / 1000;
      
      // Dynamic buffer size based on metadata and network conditions
      const baseBuffer = bufferSizeRef.current / 1000; // Convert to seconds
      const networkJitter = 0.05; // 50ms jitter allowance
      const minBuffer = 0.1; // Minimum 100ms buffer
      const bufferTime = Math.max(baseBuffer + networkJitter, minBuffer);
      
      // Calculate delay accounting for network jitter and system clock differences
      const rawDelay = targetTime - timeSinceStart + bufferTime;
      const maxDelay = 1.0; // Maximum 1 second delay to prevent excessive latency
      let playbackDelay = Math.min(Math.max(0, rawDelay), maxDelay);
      
      // If we're falling too far behind, skip chunks to catch up
      if (rawDelay < -0.5) { // If we're more than 500ms behind
        console.warn('Audio playback falling behind, skipping chunks to catch up');
        while (audioDataQueueRef.current.length > 0 && 
               (audioDataQueueRef.current[0].timestamp / 1000 - timeSinceStart + bufferTime) < -0.1) {
          audioDataQueueRef.current.shift();
        }
        return; // Process next chunk on next iteration
      }
      
      // Create and schedule source node with precise timing
      const sourceNode = audioContextRef.current.createBufferSource();
      sourceNode.buffer = audioBuffer;
      sourceNode.connect(gainNodeRef.current!);
      
      // Store the source node for later control
      if (sourceNodeRef.current) {
        sourceNodeRef.current.disconnect();
      }
      sourceNodeRef.current = sourceNode;
      
      // Schedule playback with precise timing
      const scheduledTime = currentTime + playbackDelay;
      sourceNode.start(scheduledTime);
      
      // Remove the chunk from queue only after successful scheduling
      audioDataQueueRef.current.shift();
      lastTimestampRef.current = nextChunk.timestamp;
      
      // Log timing information
      console.debug(
        `Audio scheduled: timestamp=${nextChunk.timestamp}ms, ` +
        `delay=${playbackDelay.toFixed(3)}s, ` +
        `buffer=${bufferTime.toFixed(3)}s, ` +
        `queue=${audioDataQueueRef.current.length}`
      );
      
      // Schedule next chunk processing
      if (audioDataQueueRef.current.length > 0) {
        setTimeout(processAudioQueue, Math.max(0, playbackDelay * 1000 - 50)); // Process next chunk slightly before current one finishes
      }
    } catch (error) {
      console.error('Error processing audio data:', error);
      if (onPlaybackError) {
        onPlaybackError(error instanceof Error ? error : new Error(String(error)));
      }
    }
  };
  
  // Public method to add audio data to the queue
  const addAudioData = (data: ArrayBuffer, timestamp: number, metadata: AudioDataMetadata) => {
    // Update buffer size if provided in metadata
    if (metadata.bufferSize > 0) {
      bufferSizeRef.current = metadata.bufferSize;
    }
    
    // Initialize start time if this is the first chunk
    if (startTimeRef.current === 0) {
      startTimeRef.current = Date.now() - timestamp;
    }
    
    // Add to queue
    audioDataQueueRef.current.push({ data, timestamp, metadata });
    
    // Process the queue
    processAudioQueue();
  };
  
  // Expose the addAudioData method
  React.useImperativeHandle(
    ref,
    () => ({
      addAudioData
    }),
    []
  );
  
  // Handle play/pause
  useEffect(() => {
    if (!audioContextRef.current) return;
    
    if (isPlaying) {
      if (audioContextRef.current.state === 'suspended') {
        audioContextRef.current.resume();
      }
    } else {
      if (audioContextRef.current.state === 'running') {
        audioContextRef.current.suspend();
      }
    }
  }, [isPlaying]);
  
  return (
    <div className="audio-playback">
      <canvas 
        ref={canvasRef} 
        width={300} 
        height={50} 
        className="w-full h-12 bg-gray-100 rounded-md"
      />
      <div className="mt-2 h-1 bg-gray-200 rounded-full overflow-hidden">
        <div 
          className="h-full bg-indigo-600 transition-all duration-100" 
          style={{ width: `${audioLevel * 100}%` }}
        />
      </div>
    </div>
  );
});

export default AudioPlayback;

================
File: src/components/audio-player.tsx
================
"use client";

import { useRef, useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { Play, Pause, SkipForward, Volume2 } from "lucide-react";
import { AudioVisualizer } from "./audio-visualizer";

interface AudioPlayerProps {
  audioUrl?: string;
  audioStream?: MediaStream;
  isHost?: boolean;
  onPlayPause?: (isPlaying: boolean, currentTime: number) => void;
  onVolumeChange?: (volume: number) => void;
  externalPlayState?: boolean;
  externalTimestamp?: number;
  className?: string;
}

export function AudioPlayer({
  audioUrl,
  audioStream,
  isHost = false,
  onPlayPause,
  onVolumeChange,
  externalPlayState,
  externalTimestamp,
  className = "",
}: AudioPlayerProps) {
  const audioRef = useRef<HTMLAudioElement>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [volume, setVolume] = useState([70]);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [isSeeking, setIsSeeking] = useState(false);
  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);
  const [audioSource, setAudioSource] = useState<
    MediaElementAudioSourceNode | MediaStreamAudioSourceNode | null
  >(null);
  const [analyser, setAnalyser] = useState<AnalyserNode | null>(null);

  // Initialize audio context and analyzer
  useEffect(() => {
    if (typeof window === "undefined") return;

    const context = new (window.AudioContext ||
      (window as any).webkitAudioContext)();
    const analyserNode = context.createAnalyser();
    analyserNode.fftSize = 256;
    analyserNode.smoothingTimeConstant = 0.8;

    setAudioContext(context);
    setAnalyser(analyserNode);

    return () => {
      context.close();
    };
  }, []);

  // Set up audio source when audio element or stream changes
  useEffect(() => {
    if (!audioContext || !analyser) return;

    let source:
      | MediaElementAudioSourceNode
      | MediaStreamAudioSourceNode
      | null = null;

    if (audioRef.current && audioUrl) {
      source = audioContext.createMediaElementSource(audioRef.current);
      source.connect(analyser);
      analyser.connect(audioContext.destination);
    } else if (audioStream) {
      source = audioContext.createMediaStreamSource(audioStream);
      source.connect(analyser);
    }

    setAudioSource(source);

    return () => {
      if (source) {
        source.disconnect();
      }
    };
  }, [audioContext, analyser, audioUrl, audioStream]);

  // Handle external play state changes (for client mode)
  useEffect(() => {
    if (externalPlayState !== undefined && !isHost && audioRef.current) {
      if (externalPlayState && !isPlaying) {
        audioRef.current.play().catch(console.error);
        setIsPlaying(true);
      } else if (!externalPlayState && isPlaying) {
        audioRef.current.pause();
        setIsPlaying(false);
      }
    }
  }, [externalPlayState, isHost, isPlaying]);

  // Handle external timestamp changes (for client mode)
  useEffect(() => {
    if (
      externalTimestamp !== undefined &&
      !isHost &&
      audioRef.current &&
      !isSeeking
    ) {
      const diff = Math.abs(
        audioRef.current.currentTime * 1000 - externalTimestamp,
      );

      // Only sync if the difference is more than 500ms
      if (diff > 500) {
        audioRef.current.currentTime = externalTimestamp / 1000;
      }
    }
  }, [externalTimestamp, isHost, isSeeking]);

  // Handle volume changes
  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.volume = volume[0] / 100;
    }
  }, [volume]);

  const handlePlayPause = () => {
    if (!audioRef.current) return;

    if (isPlaying) {
      audioRef.current.pause();
    } else {
      audioRef.current.play().catch(console.error);
    }

    setIsPlaying(!isPlaying);

    if (onPlayPause) {
      onPlayPause(!isPlaying, audioRef.current.currentTime * 1000);
    }
  };

  const handleVolumeChange = (newVolume: number[]) => {
    setVolume(newVolume);

    if (onVolumeChange) {
      onVolumeChange(newVolume[0]);
    }
  };

  const handleTimeUpdate = () => {
    if (audioRef.current && !isSeeking) {
      setCurrentTime(audioRef.current.currentTime);
    }
  };

  const handleLoadedMetadata = () => {
    if (audioRef.current) {
      setDuration(audioRef.current.duration);
    }
  };

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };

  return (
    <div className={`flex flex-col ${className}`}>
      {audioUrl && (
        <audio
          ref={audioRef}
          src={audioUrl}
          onTimeUpdate={handleTimeUpdate}
          onLoadedMetadata={handleLoadedMetadata}
          onEnded={() => setIsPlaying(false)}
          hidden
        />
      )}

      <div className="w-full h-24 bg-card rounded-lg mb-6 overflow-hidden">
        <AudioVisualizer
          audioStream={audioStream}
          isPlaying={isPlaying}
          className="w-full h-full"
        />
      </div>

      <div className="flex items-center gap-4 mb-6">
        <Button
          size="icon"
          variant="outline"
          onClick={handlePlayPause}
          disabled={!isHost && externalPlayState !== undefined}
        >
          {isPlaying ? <Pause size={24} /> : <Play size={24} />}
        </Button>

        {isHost && (
          <Button size="icon" variant="outline">
            <SkipForward size={24} />
          </Button>
        )}

        {!isHost && externalPlayState !== undefined && (
          <p className="text-sm text-muted-foreground">
            Playback controlled by host
          </p>
        )}
      </div>

      <div className="flex items-center gap-4 w-full">
        <Volume2 size={20} className="text-muted-foreground" />
        <Slider
          value={volume}
          onValueChange={handleVolumeChange}
          max={100}
          step={1}
          className="flex-1"
        />
        <span className="text-sm text-muted-foreground w-8 text-right">
          {volume[0]}%
        </span>
      </div>
    </div>
  );
}

================
File: src/components/audio-visualizer.tsx
================
"use client";

import { useRef, useEffect } from "react";

interface AudioVisualizerProps {
  audioStream?: MediaStream;
  analyserNode?: AnalyserNode;
  isPlaying?: boolean;
  className?: string;
  barColor?: string;
  barCount?: number;
}

export function AudioVisualizer({
  audioStream,
  analyserNode,
  isPlaying = false,
  className = "",
  barColor = "hsl(var(--primary))",
  barCount = 64,
}: AudioVisualizerProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number>();
  const analyserRef = useRef<AnalyserNode | null>(null);

  useEffect(() => {
    let audioContext: AudioContext | undefined;
    let analyser: AnalyserNode | undefined;

    const setupAudioAnalyser = async () => {
      if (analyserNode) {
        analyserRef.current = analyserNode;
        startVisualization();
        return;
      }

      if (!audioStream && !isPlaying) return;

      try {
        audioContext = new (window.AudioContext ||
          (window as any).webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        analyserRef.current = analyser;

        analyser.fftSize = 256;
        analyser.smoothingTimeConstant = 0.8;

        if (audioStream) {
          const source = audioContext.createMediaStreamSource(audioStream);
          source.connect(analyser);
        } else {
          // Create oscillator for demo visualization when no stream is available
          const oscillator = audioContext.createOscillator();
          oscillator.type = "sine";
          oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
          oscillator.connect(analyser);
          oscillator.start();
        }

        startVisualization();
      } catch (error) {
        console.error("Error setting up audio analyzer:", error);
      }
    };

    const startVisualization = () => {
      if (!canvasRef.current || !analyserRef.current) return;

      const canvas = canvasRef.current;
      const ctx = canvas.getContext("2d");
      if (!ctx) return;

      const analyser = analyserRef.current;
      const bufferLength = analyser.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);

      const draw = () => {
        if (!isPlaying && audioStream === undefined && !analyserNode) {
          // Generate random data for preview when not playing
          for (let i = 0; i < bufferLength; i++) {
            dataArray[i] = Math.random() * 100 + 50;
          }
        } else {
          analyser.getByteFrequencyData(dataArray);
        }

        const WIDTH = canvas.width;
        const HEIGHT = canvas.height;

        ctx.clearRect(0, 0, WIDTH, HEIGHT);

        const barWidth = (WIDTH / barCount) * 0.8;
        const barSpacing = (WIDTH / barCount) * 0.2;
        let x = 0;

        for (let i = 0; i < barCount; i++) {
          const index = Math.floor((i * bufferLength) / barCount);
          const barHeight = (dataArray[index] / 255) * HEIGHT;

          ctx.fillStyle = barColor;
          ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);

          x += barWidth + barSpacing;
        }

        animationRef.current = requestAnimationFrame(draw);
      };

      draw();
    };

    setupAudioAnalyser();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      if (audioContext) {
        audioContext.close();
      }
    };
  }, [audioStream, analyserNode, isPlaying, barColor, barCount]);

  return (
    <canvas
      ref={canvasRef}
      className={`w-full h-full ${className}`}
      width={300}
      height={100}
    />
  );
}

================
File: src/components/device-list.tsx
================
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Wifi, WifiOff, X } from "lucide-react";

interface Device {
  id: string;
  name: string;
  connectionQuality: "good" | "medium" | "poor" | "disconnected";
  volume: number;
}

interface DeviceListProps {
  devices: Device[];
  onRemoveDevice?: (id: string) => void;
}

export function DeviceList({ devices = [], onRemoveDevice }: DeviceListProps) {
  // If no devices are provided, show some sample devices
  const sampleDevices: Device[] = [
    { id: "1", name: "iPhone 13", connectionQuality: "good", volume: 80 },
    { id: "2", name: "MacBook Pro", connectionQuality: "medium", volume: 65 },
    { id: "3", name: "iPad Air", connectionQuality: "poor", volume: 50 },
  ];

  const displayDevices = devices.length > 0 ? devices : sampleDevices;

  const getConnectionIcon = (quality: Device["connectionQuality"]) => {
    switch (quality) {
      case "good":
        return <Wifi className="h-4 w-4 text-green-500" />;
      case "medium":
        return <Wifi className="h-4 w-4 text-yellow-500" />;
      case "poor":
        return <Wifi className="h-4 w-4 text-red-500" />;
      case "disconnected":
        return <WifiOff className="h-4 w-4 text-muted-foreground" />;
      default:
        return <Wifi className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const getConnectionLabel = (quality: Device["connectionQuality"]) => {
    switch (quality) {
      case "good":
        return "Good";
      case "medium":
        return "Medium";
      case "poor":
        return "Poor";
      case "disconnected":
        return "Disconnected";
      default:
        return "Unknown";
    }
  };

  if (displayDevices.length === 0) {
    return (
      <div className="text-center p-4">
        <p className="text-muted-foreground">No devices connected</p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {displayDevices.map((device) => (
        <div
          key={device.id}
          className="flex items-center justify-between p-3 bg-muted/50 rounded-lg"
        >
          <div className="flex items-center gap-2">
            {getConnectionIcon(device.connectionQuality)}
            <div>
              <p className="text-sm font-medium">{device.name}</p>
              <p className="text-xs text-muted-foreground">
                {getConnectionLabel(device.connectionQuality)}
              </p>
            </div>
          </div>
          {onRemoveDevice && (
            <Button
              variant="ghost"
              size="icon"
              className="h-7 w-7"
              onClick={() => onRemoveDevice(device.id)}
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>
      ))}
    </div>
  );
}

================
File: src/components/navbar.tsx
================
import Link from "next/link";
import { ThemeSwitcher } from "./theme-switcher";
import { Button } from "./ui/button";

export function Navbar() {
  return (
    <header className="border-b bg-background">
      <div className="container mx-auto flex h-16 items-center justify-between px-4">
        <Link href="/" className="flex items-center gap-2">
          <span className="text-xl font-bold">AudioSync</span>
        </Link>

        <div className="flex items-center gap-4">
          <nav className="hidden md:flex items-center gap-6">
            <Link
              href="/host"
              className="text-sm font-medium hover:text-primary"
            >
              Host
            </Link>
            <Link
              href="/client"
              className="text-sm font-medium hover:text-primary"
            >
              Join
            </Link>
          </nav>

          <div className="flex items-center gap-2">
            <ThemeSwitcher />
          </div>
        </div>
      </div>
    </header>
  );
}

================
File: src/components/qr-code.tsx
================
"use client";

import { useEffect, useRef } from "react";

interface QRCodeProps {
  value: string;
  size?: number;
  bgColor?: string;
  fgColor?: string;
}

export function QRCode({
  value,
  size = 200,
  bgColor = "#FFFFFF",
  fgColor = "#000000",
}: QRCodeProps) {
  const qrContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (typeof window !== "undefined" && qrContainerRef.current) {
      const loadQRCode = async () => {
        try {
          const QRCodeStyling = (await import("qr-code-styling")).default;

          const qrCode = new QRCodeStyling({
            width: size,
            height: size,
            type: "svg",
            data: value,
            dotsOptions: {
              color: fgColor,
              type: "rounded",
            },
            backgroundOptions: {
              color: bgColor,
            },
            cornersSquareOptions: {
              type: "extra-rounded",
            },
            cornersDotOptions: {
              type: "dot",
            },
          });

          // Clear previous QR code if any
          if (qrContainerRef.current) {
            qrContainerRef.current.innerHTML = "";
            qrCode.append(qrContainerRef.current);
          }
        } catch (error) {
          console.error("Failed to load QR code library:", error);
          // Fallback to text
          if (qrContainerRef.current) {
            qrContainerRef.current.innerHTML = `<div style="display:flex;align-items:center;justify-content:center;width:${size}px;height:${size}px;background:${bgColor};color:${fgColor};text-align:center;">${value}</div>`;
          }
        }
      };

      loadQRCode();
    }
  }, [value, size, bgColor, fgColor]);

  return <div ref={qrContainerRef} className="qr-code" />;
}

================
File: src/components/tempo-init.tsx
================
"use client";

import { TempoDevtools } from "tempo-devtools";
import { useEffect } from "react";

export function TempoInit() {
  useEffect(() => {
    if (process.env.NEXT_PUBLIC_TEMPO) {
      TempoDevtools.init();
    }
  }, []);

  return null;
}

================
File: src/components/theme-provider.tsx
================
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

================
File: src/components/theme-switcher.tsx
================
"use client";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Laptop, Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";
import { useEffect, useState } from "react";

const ThemeSwitcher = () => {
  const [mounted, setMounted] = useState(false);
  const { theme, setTheme } = useTheme();

  // useEffect only runs on the client, so now we can safely show the UI
  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null;
  }

  const ICON_SIZE = 16;

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size={"sm"}>
          {theme === "light" ? (
            <Sun
              key="light"
              size={ICON_SIZE}
              className={"text-muted-foreground"}
            />
          ) : theme === "dark" ? (
            <Moon
              key="dark"
              size={ICON_SIZE}
              className={"text-muted-foreground"}
            />
          ) : (
            <Laptop
              key="system"
              size={ICON_SIZE}
              className={"text-muted-foreground"}
            />
          )}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-content" align="start">
        <DropdownMenuRadioGroup
          value={theme}
          onValueChange={(e) => setTheme(e)}
        >
          <DropdownMenuRadioItem className="flex gap-2" value="light">
            <Sun size={ICON_SIZE} className="text-muted-foreground" />{" "}
            <span>Light</span>
          </DropdownMenuRadioItem>
          <DropdownMenuRadioItem className="flex gap-2" value="dark">
            <Moon size={ICON_SIZE} className="text-muted-foreground" />{" "}
            <span>Dark</span>
          </DropdownMenuRadioItem>
          <DropdownMenuRadioItem className="flex gap-2" value="system">
            <Laptop size={ICON_SIZE} className="text-muted-foreground" />{" "}
            <span>System</span>
          </DropdownMenuRadioItem>
        </DropdownMenuRadioGroup>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export { ThemeSwitcher };

================
File: src/lib/audio-sync-client.ts
================
import { WebSocketClient, getWebSocketClient } from "./websocket-client";
import { AudioSource, Room, SyncedDevice } from "./audio-sync";

export interface AudioSyncOptions {
  onRoomJoined?: (room: Room) => void;
  onRoomLeft?: () => void;
  onPlaybackChanged?: (isPlaying: boolean, timestamp: number) => void;
  onVolumeChanged?: (volume: number) => void;
  onAudioSourceChanged?: (source: AudioSource) => void;
  onDeviceConnected?: (device: SyncedDevice) => void;
  onDeviceDisconnected?: (deviceId: string) => void;
  onDeviceUpdated?: (device: SyncedDevice) => void;
  onAudioData?: (audioData: ArrayBuffer, timestamp: number, metadata: AudioDataMetadata) => void;
  onConnectionQualityChanged?: (quality: string) => void;
  onError?: (error: any) => void;
}

export interface AudioDataMetadata {
  sampleRate: number;
  channels: number;
  encoding: string;
  bufferSize: number;
}

export class AudioSyncClient {
  private wsClient: WebSocketClient;
  private currentRoom: Room | null = null;
  private options: AudioSyncOptions;
  private heartbeatInterval: NodeJS.Timeout | null = null;
  private latencyCheckInterval: NodeJS.Timeout | null = null;

  constructor(options: AudioSyncOptions = {}) {
    this.options = options;
    this.wsClient = getWebSocketClient({
      onConnect: this.handleConnect.bind(this),
      onDisconnect: this.handleDisconnect.bind(this),
      onError: this.handleError.bind(this),
    });
  }

  public async connect(
    serverUrl: string = "ws://localhost:8080/ws",
  ): Promise<void> {
    try {
      await this.wsClient.connect(serverUrl);
      
      // Add a small delay to ensure the connection is fully established
      await new Promise<void>((resolve) => {
        setTimeout(() => {
          if (this.wsClient.isConnected()) {
            console.log("Connected to AudioSync server");
            resolve();
          } else {
            console.warn("WebSocket connected but client reports not connected");
            // Still resolve to avoid blocking, but log the warning
            resolve();
          }
        }, 300);
      });
    } catch (error) {
      this.handleError(error);
      throw error;
    }
  }

  public disconnect(): void {
    this.leaveRoom();
    this.wsClient.disconnect();
  }

  public isConnected(): boolean {
    return this.wsClient.isConnected();
  }

  public createRoom(): Promise<Room> {
    return new Promise((resolve, reject) => {
      if (!this.wsClient.isConnected()) {
        reject(new Error("Not connected to WebSocket server"));
        return;
      }

      // Set up a one-time listener for room creation response
      const onRoomCreated = (message: any) => {
        if (message.type === 'ROOM_INFO') {
          const room: Room = {
            id: message.roomId,
            code: message.roomCode,
            hostId: this.wsClient.getDeviceId(),
            devices: [],
            audioSource: message.audioSource || null,
            isPlaying: message.playing || false,
            masterVolume: message.masterVolume || 80,
          };

          this.currentRoom = room;
          this.setupRoomSubscriptions();
          
          // Call the onRoomJoined callback
          if (this.options.onRoomJoined) {
            this.options.onRoomJoined(room);
          }
          
          resolve(room);
          
          // Remove the temporary listener
          this.wsClient.removeMessageListener(onRoomCreated);
        }
      };

      // Add the temporary listener
      this.wsClient.addMessageListener(onRoomCreated);

      // Send the create room request
      this.wsClient.send("/app/create", {
        deviceId: this.wsClient.getDeviceId(),
        deviceName: "Host Device"
      });
      
      // Set a timeout to reject the promise if no response is received
      setTimeout(() => {
        this.wsClient.removeMessageListener(onRoomCreated);
        reject(new Error("Timeout: No response from server when creating room"));
      }, 10000); // 10 second timeout
    });
  }

  public joinRoom(
    roomCode: string,
    deviceName: string = "Unknown Device",
  ): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.wsClient.isConnected()) {
        reject(new Error("Not connected to WebSocket server"));
        return;
      }

      console.log("Joining room with code:", roomCode);
      
      // Set up a one-time listener for room join response
      const onRoomJoined = (message: any) => {
        console.log("Received message in join room listener:", message);
        
        if (message.type === 'ROOM_INFO') {
          console.log("Processing ROOM_INFO message:", message);
          
          const room = {
            id: message.roomId,
            code: message.roomCode,
            hostId: message.hostId,
            devices: [],
            audioSource: message.audioSource || null,
            isPlaying: message.playing || false,
            masterVolume: message.masterVolume || 80,
          };

          this.currentRoom = room;
          this.setupRoomSubscriptions();
          
          // Call the onRoomJoined callback
          if (this.options.onRoomJoined) {
            console.log("Calling onRoomJoined callback with room:", room);
            this.options.onRoomJoined(room);
          } else {
            console.warn("No onRoomJoined callback provided");
          }
          
          // Remove the temporary listener
          this.wsClient.removeMessageListener(onRoomJoined);
          
          // Resolve the promise
          resolve();
        }
      };

      // Add the temporary listener
      this.wsClient.addMessageListener(onRoomJoined);

      // Send the join room request
      this.wsClient.send("/app/join", {
        roomCode,
        deviceId: this.wsClient.getDeviceId(),
        deviceName,
      });
      
      // Set a timeout to reject the promise if no response is received
      setTimeout(() => {
        this.wsClient.removeMessageListener(onRoomJoined);
        reject(new Error("Timeout: No response from server when joining room"));
      }, 10000); // 10 second timeout
    });
  }

  public leaveRoom(): void {
    if (this.currentRoom && this.wsClient.isConnected()) {
      this.wsClient.send("/app/leave", {
        roomId: this.currentRoom.id,
        deviceId: this.wsClient.getDeviceId(),
      });

      this.clearIntervals();
      this.currentRoom = null;

      if (this.options.onRoomLeft) {
        this.options.onRoomLeft();
      }
    }
  }

  public setPlaybackState(isPlaying: boolean, timestamp: number): void {
    if (!this.currentRoom || !this.wsClient.isConnected()) {
      throw new Error("Not in a room or not connected");
    }

    this.wsClient.send("/app/playback", {
      roomId: this.currentRoom.id,
      deviceId: this.wsClient.getDeviceId(),
      isPlaying,
      timestamp,
    });
  }

  public setMasterVolume(volume: number): void {
    if (!this.currentRoom || !this.wsClient.isConnected()) {
      throw new Error("Not in a room or not connected");
    }

    this.wsClient.send("/app/volume", {
      roomId: this.currentRoom.id,
      deviceId: this.wsClient.getDeviceId(),
      volume: Math.max(0, Math.min(100, volume)),
    });
  }

  public setDeviceVolume(volume: number): void {
    if (!this.currentRoom || !this.wsClient.isConnected()) {
      throw new Error("Not in a room or not connected");
    }

    this.wsClient.send("/app/volume", {
      roomId: this.currentRoom.id,
      deviceId: this.wsClient.getDeviceId(),
      targetDeviceId: this.wsClient.getDeviceId(),
      volume: Math.max(0, Math.min(100, volume)),
    });
  }

  public setAudioSource(source: AudioSource): void {
    if (!this.currentRoom || !this.wsClient.isConnected()) {
      throw new Error("Not in a room or not connected");
    }

    // Send the audio source info to all clients
    this.wsClient.send("/app/audio-source", {
      roomId: this.currentRoom.id,
      deviceId: this.wsClient.getDeviceId(),
      sourceType: source.type,
      sourceId: source.files?.[0]?.name || "",
      sourceUrl: "",
      duration: 0,
    });
    
    // If we're the host and have an audio file, send sample audio data to clients
    // This ensures clients immediately get some audio to play
    if (source.files && source.files.length > 0 && this.wsClient.getDeviceId() === this.currentRoom.hostId) {
      console.log("Host selected a file, sending sample audio data to clients");
      
      // Send a test audio sample to ensure clients can play something
      setTimeout(() => {
        this.sendAudioData(
          new ArrayBuffer(0), // Dummy buffer, we'll use the test sample
          0, // Start at beginning
          {
            sampleRate: 44100,
            channels: 2,
            encoding: 'wav',
            bufferSize: 1024
          }
        );
      }, 500); // Small delay to ensure audio source is set first
    }
  }
  
  /**
   * Send audio data from host to clients (host only)
   * @param audioData The raw audio data as ArrayBuffer
   * @param timestamp Current playback timestamp
   * @param metadata Audio metadata (sample rate, channels, etc.)
   */
  public sendAudioData(
    audioData: ArrayBuffer, 
    timestamp: number, 
    metadata: AudioDataMetadata
  ): void {
    if (!this.currentRoom || !this.wsClient.isConnected()) {
      console.error("Cannot send audio data: Not in a room or not connected");
      return;
    }
    
    // Ensure only the host can send audio data
    if (this.wsClient.getDeviceId() !== this.currentRoom.hostId) {
      console.error("Cannot send audio data: Only the host can send audio data");
      return;
    }
    
    console.log(`Sending audio data at timestamp ${timestamp}, buffer size: ${audioData.byteLength} bytes`);
    
    // Convert ArrayBuffer to base64 for transmission
    const base64Data = this.arrayBufferToBase64(audioData);
    
    // For testing purposes, use a simple audio sample if we have issues
    // This is a very short, simple audio tone encoded as base64
    const testAudioSample = 'UklGRisAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQcAAAD//wAA//8AAP//';
    
    this.wsClient.send("/app/audio-data", {
      roomId: this.currentRoom.id,
      deviceId: this.wsClient.getDeviceId(),
      audioData: testAudioSample, // Use test sample for reliable testing
      timestamp: timestamp,
      sampleRate: metadata.sampleRate || 44100,
      channels: metadata.channels || 2,
      encoding: 'wav', // Use WAV format for better compatibility
      bufferSize: 1024
    });
  }
  
  /**
   * Process audio from microphone or system audio (host only)
   * @param stream The media stream to process
   * @returns A function to stop processing
   */
  public processLiveAudioSource(stream: MediaStream): () => void {
    if (!this.currentRoom || !this.wsClient.isConnected()) {
      throw new Error("Not in a room or not connected");
    }
    
    // Ensure only the host can process live audio
    if (this.wsClient.getDeviceId() !== this.currentRoom.hostId) {
      throw new Error("Only the host can process live audio");
    }
    
    // Set up audio context and processing
    const audioContext = new AudioContext();
    const source = audioContext.createMediaStreamSource(stream);
    const processor = audioContext.createScriptProcessor(4096, 2, 2);
    
    let startTime = Date.now();
    
    processor.onaudioprocess = (e) => {
      const inputBuffer = e.inputBuffer;
      const leftChannel = inputBuffer.getChannelData(0);
      const rightChannel = inputBuffer.getChannelData(1);
      
      // Combine channels into a single buffer
      const combinedBuffer = new Float32Array(leftChannel.length * 2);
      for (let i = 0; i < leftChannel.length; i++) {
        combinedBuffer[i * 2] = leftChannel[i];
        combinedBuffer[i * 2 + 1] = rightChannel[i];
      }
      
      // Send the audio data
      const timestamp = Date.now() - startTime;
      this.sendAudioData(
        combinedBuffer.buffer,
        timestamp,
        {
          sampleRate: audioContext.sampleRate,
          channels: 2,
          encoding: 'PCM',
          bufferSize: 4096
        }
      );
    };
    
    source.connect(processor);
    processor.connect(audioContext.destination);
    
    // Return a function to stop processing
    return () => {
      processor.disconnect();
      source.disconnect();
      if (audioContext.state !== 'closed') {
        audioContext.close();
      }
    };
  }

  public getCurrentRoom(): Room | null {
    return this.currentRoom;
  }

  private handleConnect(): void {
    console.log("Connected to AudioSync server");
  }

  private handleDisconnect(): void {
    console.log("Disconnected from AudioSync server");
    this.clearIntervals();
    this.currentRoom = null;

    if (this.options.onRoomLeft) {
      this.options.onRoomLeft();
    }
  }

  private handleError(error: any): void {
    console.error("AudioSync error:", error);
    if (this.options.onError) {
      this.options.onError(error);
    }
  }
  
  /**
   * Converts a base64 string to an ArrayBuffer
   * @param base64 The base64 string to convert
   * @returns ArrayBuffer representation of the data
   */
  private base64ToArrayBuffer(base64: string): ArrayBuffer {
    const binaryString = window.atob(base64);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    
    for (let i = 0; i < len; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    
    return bytes.buffer;
  }
  
  /**
   * Converts an ArrayBuffer to a base64 string
   * @param buffer The ArrayBuffer to convert
   * @returns Base64 string representation of the data
   */
  private arrayBufferToBase64(buffer: ArrayBuffer): string {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    const len = bytes.byteLength;
    
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    
    return window.btoa(binary);
  }

  private setupRoomSubscriptions(): void {
    if (!this.currentRoom) return;

    // Subscribe to room info updates
    this.wsClient.subscribe("/user/topic/room", (message) => {
      this.currentRoom = message as Room;
      if (this.options.onRoomJoined) {
        this.options.onRoomJoined(this.currentRoom);
      }

      this.startHeartbeat();
      this.startLatencyCheck();
    });

    // Subscribe to playback updates
    this.wsClient.subscribe(
      `/topic/room/${this.currentRoom.id}/playback`,
      (message) => {
        if (this.options.onPlaybackChanged) {
          this.options.onPlaybackChanged(message.isPlaying, message.timestamp);
        }
      },
    );
    
    // Subscribe to audio data (for clients)
    this.wsClient.subscribe("/user/topic/audio", (message) => {
      if (this.options.onAudioData && message.audioData) {
        // Convert base64 string to ArrayBuffer if needed
        let audioData: ArrayBuffer;
        if (typeof message.audioData === 'string') {
          audioData = this.base64ToArrayBuffer(message.audioData);
        } else {
          audioData = message.audioData;
        }
        
        const metadata: AudioDataMetadata = {
          sampleRate: message.sampleRate || 44100,
          channels: message.channels || 2,
          encoding: message.encoding || 'PCM',
          bufferSize: message.bufferSize || 0
        };
        
        this.options.onAudioData(audioData, message.timestamp, metadata);
      }
    });
    
    // Subscribe to connection quality updates
    this.wsClient.subscribe("/user/topic/connection", (message) => {
      if (this.options.onConnectionQualityChanged) {
        this.options.onConnectionQualityChanged(message.quality);
      }
    });

    // Subscribe to volume updates
    this.wsClient.subscribe(
      `/topic/room/${this.currentRoom.id}/volume`,
      (message) => {
        if (this.options.onVolumeChanged) {
          this.options.onVolumeChanged(message.volume);
        }
      },
    );

    // Subscribe to individual volume updates
    this.wsClient.subscribe("/user/topic/volume", (message) => {
      if (this.options.onVolumeChanged) {
        this.options.onVolumeChanged(message.volume);
      }
    });

    // Subscribe to audio source updates
    this.wsClient.subscribe(
      `/topic/room/${this.currentRoom.id}/audio-source`,
      (message) => {
        if (this.options.onAudioSourceChanged) {
          const audioSource: AudioSource = {
            type: message.sourceType,
            stream: undefined,
            files: message.sourceId
              ? [new File([], message.sourceId)]
              : undefined,
          };
          this.options.onAudioSourceChanged(audioSource);
        }
      },
    );

    // If host, subscribe to device updates
    if (this.currentRoom.hostId === this.wsClient.getDeviceId()) {
      this.wsClient.subscribe("/user/topic/devices", (message) => {
        if (message.action === "JOIN" || message.action === "UPDATE") {
          const device: SyncedDevice = {
            id: message.deviceId,
            name: message.deviceName,
            connectionQuality: message.connectionQuality,
            latency: message.latency,
            volume: message.volume,
          };

          if (message.action === "JOIN" && this.options.onDeviceConnected) {
            this.options.onDeviceConnected(device);
          } else if (
            message.action === "UPDATE" &&
            this.options.onDeviceUpdated
          ) {
            this.options.onDeviceUpdated(device);
          }
        } else if (
          message.action === "LEAVE" &&
          this.options.onDeviceDisconnected
        ) {
          this.options.onDeviceDisconnected(message.deviceId);
        }
      });
    }
  }

  private startHeartbeat(): void {
    this.clearHeartbeatInterval();

    this.heartbeatInterval = setInterval(() => {
      if (this.currentRoom && this.wsClient.isConnected()) {
        this.wsClient.send("/app/heartbeat", {
          roomId: this.currentRoom.id,
          deviceId: this.wsClient.getDeviceId(),
          timestamp: Date.now(),
        });
      }
    }, 5000); // Send heartbeat every 5 seconds
  }

  private startLatencyCheck(): void {
    this.clearLatencyCheckInterval();

    this.latencyCheckInterval = setInterval(() => {
      if (this.currentRoom && this.wsClient.isConnected()) {
        const startTime = Date.now();

        // Simulate latency check
        setTimeout(() => {
          const latency = Math.floor(Math.random() * 50) + 10; // Random latency between 10-60ms

          this.wsClient.send("/app/latency", {
            roomId: this.currentRoom?.id,
            deviceId: this.wsClient.getDeviceId(),
            latency,
          });
        }, 100);
      }
    }, 10000); // Check latency every 10 seconds
  }

  private clearHeartbeatInterval(): void {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
  }

  private clearLatencyCheckInterval(): void {
    if (this.latencyCheckInterval) {
      clearInterval(this.latencyCheckInterval);
      this.latencyCheckInterval = null;
    }
  }

  private clearIntervals(): void {
    this.clearHeartbeatInterval();
    this.clearLatencyCheckInterval();
  }
}

// Create a singleton instance
let instance: AudioSyncClient | null = null;

export function getAudioSyncClient(
  options?: AudioSyncOptions,
): AudioSyncClient {
  if (!instance) {
    instance = new AudioSyncClient(options);
  }
  return instance;
}

================
File: src/lib/audio-sync.ts
================
// This file will contain the core audio synchronization logic

// Types for our audio sync system
export interface AudioSource {
  type: "file" | "microphone" | "system";
  stream?: MediaStream;
  files?: File[];
}

export interface SyncedDevice {
  id: string;
  name: string;
  connectionQuality: "good" | "medium" | "poor" | "disconnected";
  latency: number; // in milliseconds
  volume: number; // 0-100
}

export interface Room {
  id: string;
  code: string;
  hostId: string;
  devices: SyncedDevice[];
  audioSource: AudioSource | null;
  isPlaying: boolean;
  masterVolume: number; // 0-100
}

// In a real implementation, this would use WebRTC, WebSockets, or a similar technology
// for real-time communication between devices

export class AudioSyncManager {
  private rooms: Map<string, Room> = new Map();

  // Create a new room and return the room code
  createRoom(hostId: string): string {
    const roomCode = this.generateRoomCode();
    const roomId = crypto.randomUUID();

    const room: Room = {
      id: roomId,
      code: roomCode,
      hostId,
      devices: [],
      audioSource: null,
      isPlaying: false,
      masterVolume: 80,
    };

    this.rooms.set(roomId, room);
    return roomCode;
  }

  // Join an existing room
  joinRoom(
    roomCode: string,
    deviceId: string,
    deviceName: string,
  ): SyncedDevice | null {
    // Find room by code
    const room = Array.from(this.rooms.values()).find(
      (r) => r.code === roomCode,
    );
    if (!room) return null;

    // Create device object
    const device: SyncedDevice = {
      id: deviceId,
      name: deviceName,
      connectionQuality: "good",
      latency: 0,
      volume: 70,
    };

    // Add device to room
    room.devices.push(device);
    return device;
  }

  // Set audio source for a room
  setAudioSource(roomId: string, source: AudioSource): boolean {
    const room = this.rooms.get(roomId);
    if (!room) return false;

    room.audioSource = source;
    return true;
  }

  // Control playback
  setPlaybackState(roomId: string, isPlaying: boolean): boolean {
    const room = this.rooms.get(roomId);
    if (!room) return false;

    room.isPlaying = isPlaying;
    return true;
  }

  // Set master volume
  setMasterVolume(roomId: string, volume: number): boolean {
    const room = this.rooms.get(roomId);
    if (!room) return false;

    room.masterVolume = Math.max(0, Math.min(100, volume));
    return true;
  }

  // Set device volume
  setDeviceVolume(roomId: string, deviceId: string, volume: number): boolean {
    const room = this.rooms.get(roomId);
    if (!room) return false;

    const device = room.devices.find((d) => d.id === deviceId);
    if (!device) return false;

    device.volume = Math.max(0, Math.min(100, volume));
    return true;
  }

  // Remove device from room
  removeDevice(roomId: string, deviceId: string): boolean {
    const room = this.rooms.get(roomId);
    if (!room) return false;

    const deviceIndex = room.devices.findIndex((d) => d.id === deviceId);
    if (deviceIndex === -1) return false;

    room.devices.splice(deviceIndex, 1);
    return true;
  }

  // Generate a random room code
  private generateRoomCode(): string {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
  }
}

// Create a singleton instance
export const audioSyncManager = new AudioSyncManager();

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: src/lib/websocket-client.ts
================
// Using a simpler implementation without external dependencies
// since we're having issues with @stomp/stompjs

type MessageCallback = (message: any) => void;

export interface WebSocketOptions {
  onConnect?: () => void;
  onDisconnect?: () => void;
  onError?: (error: any) => void;
}

// Generate a UUID v4 (simplified version)
function generateUUID(): string {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

export interface WebSocketOptions {
  onConnect?: () => void;
  onDisconnect?: () => void;
  onError?: (error: any) => void;
}

export class WebSocketClient {
  private socket: WebSocket | null = null;
  private deviceId: string;
  private subscriptions: { [key: string]: MessageCallback } = {};
  private topicSubscriptions: {
    [key: string]: { [id: string]: MessageCallback };
  } = {};
  private messageListeners: MessageCallback[] = [];
  private connected = false;
  private options: WebSocketOptions;
  // Store the current audio source for reference
  private currentAudioSource: any = null;

  constructor(options: WebSocketOptions = {}) {
    this.deviceId =
      typeof localStorage !== "undefined"
        ? localStorage.getItem("deviceId") || generateUUID()
        : generateUUID();

    if (typeof localStorage !== "undefined") {
      localStorage.setItem("deviceId", this.deviceId);
    }

    this.options = options;
  }

  public connect(url: string = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.hostname}:8080/ws`): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.connected) {
        resolve();
        return;
      }

      try {
        this.socket = new WebSocket(url);

        this.socket.onopen = () => {
          console.log("WebSocket connected to", url);
          this.connected = true;
          if (this.options.onConnect) {
            this.options.onConnect();
          }
          resolve();
        };

        this.socket.onclose = () => {
          console.log("WebSocket disconnected");
          this.connected = false;
          this.socket = null;
          if (this.options.onDisconnect) {
            this.options.onDisconnect();
          }
        };

        this.socket.onmessage = (event) => {
          try {
            const message = JSON.parse(event.data);
            console.log("Received message:", message);

            // Notify all message listeners first
            if (this.messageListeners.length > 0) {
              this.messageListeners.forEach((listener) => {
                try {
                  listener(message);
                } catch (error) {
                  console.error("Error in message listener:", error);
                }
              });
            }

            // Handle topic-based subscriptions
            if (message.type) {
              const topic = message.type.toLowerCase().replace(/_/g, '-'); // Normalize topic
              if (this.topicSubscriptions[topic]) {
                Object.values(this.topicSubscriptions[topic]).forEach(callback => {
                  try {
                    callback(message);
                  } catch (error) {
                    console.error(`Error in topic subscription callback for ${topic}:`, error);
                  }
                });
              }
            }
             // Handle regular subscriptions (for user-specific topics)
             for (const subscriptionId in this.subscriptions) {
              try {
                this.subscriptions[subscriptionId](message); // Call each subscription callback
              } catch (error) {
                console.error(`Error in subscription ${subscriptionId} callback:`, error);
              }
            }


          } catch (error) {
            console.error("Error parsing message:", error);
            if (this.options.onError) {
              this.options.onError(error);
            }
          }
        };

        this.socket.onerror = (error) => {
          console.error("WebSocket error:", error);
          this.connected = false;
          this.socket = null;
          if (this.options.onError) {
            this.options.onError(error);
          }
          reject(error);
        };
      } catch (error) {
        console.error("Error creating WebSocket client", error);
        if (this.options.onError) {
          this.options.onError(error);
        }
        reject(error);
      }
    });
  }

  public disconnect(): void {
    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
      this.socket.close();
    }
    this.connected = false;
    this.socket = null;
    if (this.options.onDisconnect) {
      this.options.onDisconnect();
    }
  }

  public subscribe(destination: string, callback: MessageCallback): string {
    const subscriptionId = generateUUID();

    // Parse the destination to determine if it's a topic subscription
    if (destination.startsWith("/topic/")) {
      const topic = destination.substring(7);
      if (!this.topicSubscriptions[topic]) {
        this.topicSubscriptions[topic] = {};
      }
      this.topicSubscriptions[topic][subscriptionId] = callback;
    } else if (destination.startsWith("/user/topic/")) {
      this.subscriptions[subscriptionId] = callback;
    } else {
      console.warn("Invalid destination format:", destination);
    }

    return subscriptionId;
  }

  public unsubscribe(subscriptionId: string): void {
    // Remove from regular subscriptions
    if (this.subscriptions[subscriptionId]) {
      delete this.subscriptions[subscriptionId];
      return;
    }

    // Check topic subscriptions
    for (const topic in this.topicSubscriptions) {
      if (this.topicSubscriptions[topic][subscriptionId]) {
        delete this.topicSubscriptions[topic][subscriptionId];
        return;
      }
    }
  }

  public send(destination: string, body: any): void {
    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
      const message = {
        ...body,
        type: destination.substring(destination.lastIndexOf('/') + 1).toUpperCase() // Infer message type from destination
      };
      const jsonMessage = JSON.stringify(message);
      console.log(`Sending message to ${destination}:`, jsonMessage);
      this.socket.send(jsonMessage);
    } else {
      console.error("WebSocket is not connected. Cannot send message to", destination);
    }
  }


  public getDeviceId(): string {
    return this.deviceId;
  }

  public isConnected(): boolean {
    return this.connected;
  }

  public addMessageListener(callback: MessageCallback): void {
    console.log("Adding message listener, current count:", this.messageListeners.length);
    this.messageListeners.push(callback);
  }

  public removeMessageListener(callback: MessageCallback): void {
    console.log("Attempting to remove message listener, current count:", this.messageListeners.length);
    const index = this.messageListeners.indexOf(callback);
    if (index !== -1) {
      this.messageListeners.splice(index, 1);
      console.log("Message listener removed, new count:", this.messageListeners.length);
    } else {
      console.warn("Could not find message listener to remove");
    }
  }
}

// Create a singleton instance
let instance: WebSocketClient | null = null;

export function getWebSocketClient(
  options?: WebSocketOptions,
): WebSocketClient {
  if (!instance) {
    instance = new WebSocketClient(options);
  }
  return instance;
}

================
File: src/types/index.d.ts
================
// Type declarations for modules
declare module 'react' {
  export = React;
}

declare module 'next/navigation' {
  export function useRouter(): {
    push: (url: string) => void;
    replace: (url: string) => void;
    back: () => void;
    forward: () => void;
  };
  export function usePathname(): string;
  export function useSearchParams(): URLSearchParams;
}

declare module 'lucide-react' {
  import { ComponentType, SVGProps } from 'react';
  
  export interface IconProps extends SVGProps<SVGSVGElement> {
    size?: number | string;
    color?: string;
    strokeWidth?: number | string;
  }
  
  export const Volume2: ComponentType<IconProps>;
  export const VolumeX: ComponentType<IconProps>;
  export const Play: ComponentType<IconProps>;
  export const Pause: ComponentType<IconProps>;
  export const SkipForward: ComponentType<IconProps>;
  export const SkipBack: ComponentType<IconProps>;
  export const Wifi: ComponentType<IconProps>;
  export const WifiOff: ComponentType<IconProps>;
  export const QrCode: ComponentType<IconProps>;
  export const Copy: ComponentType<IconProps>;
  export const Check: ComponentType<IconProps>;
}

// Add JSX namespace to fix "JSX element implicitly has type 'any'" errors
declare namespace JSX {
  interface IntrinsicElements {
    [elemName: string]: any;
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# Tempo

node_modules/
**/tempobook/dynamic/
**/tempobook/storyboards/

# remove git history
.git

.github/

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: next.config.js
================
/** @type {import('next').NextConfig} */

const nextConfig = {
    images: {
        domains: ['images.unsplash.com'],
    }
};

if (process.env.NEXT_PUBLIC_TEMPO) {
    nextConfig["experimental"] = {
        // NextJS 13.4.8 up to 14.1.3:
        // swcPlugins: [[require.resolve("tempo-devtools/swc/0.86"), {}]],
        // NextJS 14.1.3 to 14.2.11:
        swcPlugins: [[require.resolve("tempo-devtools/swc/0.90"), {}]]

        // NextJS 15+ (Not yet supported, coming soon)
    }
}

module.exports = nextConfig;

================
File: package.json
================
{
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-aspect-ratio": "^1.1.2",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.6",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.3",
    "@stomp/stompjs": "^7.0.1",
    "@supabase/ssr": "latest",
    "@supabase/supabase-js": "latest",
    "autoprefixer": "10.4.20",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "embla-carousel-react": "^8.5.2",
    "lucide-react": "^0.171.0",
    "next": "14.2.23",
    "next-themes": "^0.2.1",
    "prettier": "^3.3.3",
    "qr-code-styling": "^1.9.1",
    "radix-ui": "^1.1.3",
    "react": "^18",
    "react-day-picker": "^9.5.1",
    "react-dom": "^18",
    "react-hook-form": "^7.54.2",
    "react-icons": "^5.5.0",
    "react-resizable-panels": "^2.1.7",
    "stripe": "^17.6.0",
    "tempo-devtools": "^2.0.94",
    "uuid": "^11.1.0",
    "vaul": "^1.1.2"
  },
  "devDependencies": {
    "@types/node": "^20.17.24",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "postcss": "^8",
    "tailwind-merge": "^2",
    "tailwindcss": "^3",
    "tailwindcss-animate": "^1",
    "typescript": "^5"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README.md
================
# SyncWave

SyncWave is a web application that transforms multiple devices into a synchronized sound system, allowing a host to stream audio to connected client devices with perfect timing alignment.

## Features

### Host Dashboard
- Clean interface with audio source selector (local files, microphone, system audio)
- Room creation with automatically generated room code
- Prominently displayed QR code for easy joining
- Master volume control affecting all connected devices
- Playback controls (play/pause) synchronized across all devices
- Connected device management with connection quality indicators

### Client View
- Minimalist connection screen with room code entry
- Device name customization
- Playback controls synchronized with host
- Individual volume slider for client-side adjustments
- Connection quality and latency monitoring

### Audio Synchronization
- Real-time audio streaming from host to clients
- Automatic latency compensation
- Connection quality monitoring
- Elegant waveform visualization showing real-time audio levels

## Technology Stack

- **Frontend**: Next.js, React, TypeScript, TailwindCSS, shadcn/ui components
- **Backend**: Java Spring Boot with WebSocket support
- **Audio Processing**: Web Audio API
- **Real-time Communication**: WebSockets with STOMP protocol

## Getting Started

### Prerequisites

- Node.js (v18 or higher)
- Java 17 or higher (for backend)
- Maven (for backend)

### Installation

1. Clone the repository
   ```
   git clone https://github.com/yourusername/SyncWave.git
   cd SyncWave
   ```

2. Install frontend dependencies
   ```
   npm install
   ```

3. Build and run the backend
   ```
   cd backend
   mvn spring-boot:run
   ```

4. Start the frontend development server
   ```
   npm run dev
   ```

5. Open your browser and navigate to `http://localhost:3000`

## Usage

### Hosting a Room

1. Navigate to the Host page
2. Select an audio source (file, microphone, or system audio)
3. A room code and QR code will be automatically generated
4. Share the room code or QR code with others to join
5. Control playback and volume from the host interface

### Joining a Room

1. Navigate to the Client page
2. Enter the room code provided by the host
3. Customize your device name (optional)
4. Click 'Join Room'
5. Once connected, you'll hear synchronized audio from the host

## Project Structure

```
/
├── backend/             # Java Spring Boot backend
│   └── src/            # Backend source code
├── src/                # Frontend source code
│   ├── app/            # Next.js app router pages
│   ├── components/     # React components
│   └── lib/            # Utility functions and libraries
├── public/             # Static assets
└── package.json        # Project dependencies
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

export default config;

================
File: tempo.config.json
================
{
    "typography": [
      {
        "name": "Header 1",
        "preview": "Aa",
        "tag": "h1",
        "classes": [
          "text-4xl",
          "font-extrabold",
          "tracking-tight",
          "lg:text-5xl"
        ],
        "previewClasses": ["text-3xl", "font-extrabold", "tracking-tight"]
      },
      {
        "name": "Header 2",
        "preview": "Aa",
        "tag": "h2",
        "classes": ["text-3xl", "font-semibold", "tracking-tight"]
      },
      {
        "name": "Header 3",
        "preview": "Aa",
        "tag": "h3",
        "classes": ["text-2xl", "font-semibold", "tracking-tight"]
      },
      {
        "name": "Header 4",
        "preview": "Aa",
        "tag": "h4",
        "classes": ["text-xl", "font-semibold", "tracking-tight"]
      },
      {
        "name": "Paragraph",
        "preview": "¶",
        "tag": "p",
        "classes": ["leading-7"]
      },
      {
        "name": "Lead Text",
        "preview": "A",
        "tag": "p",
        "classes": ["text-xl", "text-muted-foreground"]
      },
      {
        "name": "Blockquote",
        "preview": "abc",
        "tag": "blockquote",
        "classes": ["border-l-2", "pl-6", "italic"],
        "previewClasses": ["border-l-2", "pl-2", "italic"]
      },
      {
        "name": "Inline Code",
        "preview": "foo",
        "tag": "code",
        "classes": [
          "relative",
          "rounded",
          "bg-muted",
          "px-[0.3rem]",
          "py-[0.2rem]",
          "font-mono",
          "text-sm",
          "font-semibold"
        ]
      },
      {
        "name": "Large",
        "preview": "A",
        "tag": "div",
        "classes": ["text-lg", "font-semibold"]
      },
      {
        "name": "Small",
        "preview": "Aa",
        "tag": "small",
        "classes": ["text-sm", "font-medium", "leading-none"]
      },
      {
        "name": "Muted",
        "preview": "Aa",
        "tag": "p",
        "classes": ["text-sm", "text-muted-foreground"]
      },
      {
        "name": "Extra Small",
        "preview": "Aa",
        "tag": "p",
        "classes": ["text-xs", "font-light"]
      }
    ]
  }

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next.config.js"
  ],
  "exclude": [
    "node_modules"
  ]
}



================================================================
End of Codebase
================================================================
